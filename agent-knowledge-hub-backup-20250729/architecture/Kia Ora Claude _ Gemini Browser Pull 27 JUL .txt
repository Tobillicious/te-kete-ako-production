Kia Ora Claude!, 

Last time we were working, and to a lesser extent the time before that we were running into issues making any progress because our project is now so big and developed, with many aspects of it in partial development, that you continually went to redo work we had already begun, creating quite a curricular workflow that I would like to avoid this time around. 

I have found you an amazing youtube video that you can use to develop your workflow. I suggest you pay close attention and do some research into what it is discussing before redesigning your workflow based on this new information. 
https://www.youtube.com/watch?v=Ppu6pJ5yyD4

I have also been discussing our project with Gemini in my internet browser. 

Gemini has audited our site and come up with some documents. I will post them below. 

We ALSO have important AGENT ONBOARDING docs that instruct you where other important context for you to operate is, already in our codebase… Although I think a lot of this stuff needs updating soon. You should as you work. Always be leaving bread crumbs for later agents. We know how easy it is for Ai agents to forget things between sessions. Gotta always be taking steps now to minimise it in the future. 

Here is the prompt Gemini came up with… i don’t know how great it is really. 

​​Briefing & Instructions for Claude Code: The Te Kete Ako Project
Objective: To onboard you to the Te Kete Ako project for continued development. This document provides the high-level strategic context. Two other documents, the "Master Artefact Manifest" and the "Comprehensive Site Audit," contain the specific details and priorities.
1. 🚨 CRITICAL: READ THIS FIRST
The previous development session was frustrating and unproductive because it focused on re-implementing work that was already complete (specifically, setting up Netlify environment variables and basic deployment).
Your primary directive is to AVOID repeating completed work. Before taking any action, you must consult the "Comprehensive Site Audit" document to understand the current state of the platform. The "What Is Complete" section of that audit is your definitive guide to what is already done.
2. High-Level Project Goal
Te Kete Ako is an educational platform for Mangakotukutuku College (Years 7-13) in Aotearoa, New Zealand. We are transforming it from a collection of static HTML files into a professional, database-driven, and dynamic learning ecosystem.
Our Core Philosophy is "Te Hōhonutanga" (Depth over Breadth). We are focused on creating deeply enriched, scaffolded, and high-quality learning units, not a shallow library of content.
3. The Core Architectural Shift: Project Whāriki
This is the most important strategic concept to understand. We are moving away from a static-site model.
* From: Hundreds of individual .html files for each lesson and handout.
* To: A single source of truth in a Supabase PostgreSQL database. All educational content will be stored in a master table called content_nodes.
* How: We will use a Dynamic Routing system. A small number of universal template files (e.g., view.html) will fetch content from the database based on the URL slug and render it.
* Management: A secure, login-only Kaiako Content Hub (admin panel) will be built for our team to manage this content without needing to code.
4. How to Use the Accompanying Documents
1. Start with the "Comprehensive Site Audit": This document tells you what is done, what is broken, and what to work on next. It is your primary source of truth for the project's status.
2. Use the "Master Artefact Manifest": This is your "table of contents." When the audit mentions a component like the "Universal Footer" or the "Content Hierarchy Component," you can refer to the manifest to see a high-level description of what it is.
3. Refer to the Chat History for Specific Code: The detailed code snippets for each artefact are located in the chat history of our session. Use the manifest and audit to find the specific component you need, then locate its implementation in the chat log.
Your task is to use these documents to continue the systematic implementation of the features outlined in the audit's "Go-Forward Plan."
Te Kete Ako - Master Artefact Manifest
Purpose: This document serves as a high-level checklist and index of all major components, systems, and content pieces designed for the Te Kete Ako V2.2 platform.
1. Foundational Architecture (Project Whāriki)
* [DATABASE] Master content_nodes Table Schema
* [SCRIPT] Automated Content Migration Script
* [TEMPLATE] Universal view.html Template
* [JAVASCRIPT] Dynamic Content Renderer
* [CONFIG]` Netlify Dynamic Routing Rule
* [PROTOCOL]` "Archive, Don't Delete" Deprecation Protocol
2. User & Security Systems (RBAC)
* [DATABASE] user_roles Table Schema & handle_new_user Trigger
* [DATABASE] invitation_codes & caregiver_student_links Tables
* [UI/UX]` Admin User Management Dashboard
* **[EDGE FUNCTION]** set-user-role` Endpoint
3. Student & Classroom Workflow (Project Ākonga)
* [DATABASE] student_submissions & Upgraded shared_links Tables
* [UI/UX]` "Create Assignment" Modal (with Variant Selector)
* **[EDGE FUNCTION]** create-assignment&submit-assignment` Endpoints
* [UI/UX]` Teacher & Student Dashboards
4. Navigation & Discovery (Project Tūhura)
* [UI/UX]` The "Unit Hub" Page Template
* **[RPC]** get_unit_package&get_lesson_context` RPC Functions
* [UI/UX]` The "Content Hierarchy" Component (Breadcrumb & Sequence)
* [JAVASCRIPT]` The "Smart Link" Renderer Utility
5. Intelligence & Communication (Project Māramatanga)
* [DATABASE] notifications Table & create_submission_notification Trigger
* [DATABASE] resource_comments Table & RLS Policies
* **[RPC]** Role-Aware Recommendation Engine (get_recommendations`)
6. Content & Enrichment (Kaiako Mahi)
* [UNIT PLAN]` "The Witches" & "Y8 Systems" - Full 4-Phase Plans
* [WORKBOOK]` "The Director's Workbooklet" (Standard & Tautoko Editions)
* [HANDOUT]` "Digital Source Autopsy" & "Multi-modal Composition" Planner
* [GAME DESIGN]` "Whiri Kupu" & "Pūnaha Tere"
7. Professional Polish & Utilities
* **[PWA]** manifest.json&sw.js` (Service Worker)
* [JAVASCRIPT]` "First Time User" Onboarding Tour
* [UI/UX]` "Manage Your Data" & Privacy Policy Pages
* **[CSS]** The Animation System (Project Kōwhaiwhai`)
* [JAVASCRIPT]` Universal Footer & Cached Navigation Logic
* [UI/UX]` "Empty State" Components
Te Kete Ako - Comprehensive Site Audit for Claude Code
Auditor: Gemini Date: 27 July 2025 Purpose: To provide a definitive, actionable audit of the tekete.netlify.app platform. This document identifies all remaining inconsistencies, bugs, and areas for professionalization, and sets the immediate priorities for development.
1. ✅ What Is Complete (DO NOT REPEAT)
The following foundational work is DONE. The Netlify environment variables (SUPABASE_URL, SUPABASE_ANON_KEY, etc.) are correctly configured and the site is successfully deployed.
* ✅ Stable Platform: All critical, site-breaking bugs have been resolved.
* ✅ Professional UI Shell: The streamlined header and enhanced footer are live and functional on key pages.
* ✅ Gold Standard Model: We have a proven workflow for designing deeply enriched, scaffolded units.
* ✅ Full Architectural Plan: The master plans for Project Whāriki, Project Ākonga, and all other major systems are fully designed and documented.
2. 🎯 The Go-Forward Plan: Immediate Priorities
This is the official, prioritized roadmap. You are to work on these items in this order.
Priority 1 (High): The "Quick Wins" Integration Sprint
Goal: To deliver immediate value by unlocking all orphaned content.
* Task 1.1: Execute the SQL INSERT statements to add all games from the games/ directory to the resources table.
* Task 1.2: Build the dynamic, filterable handouts.html hub page and populate it with all 50+ general handouts.
Priority 2 (High): The "Great Content Migration" (Project Whāriki)
Goal: To systematically move our core units into the new, dynamic architecture.
* Task 2.1: Migrate Unit 1. The Kaiako team will convert all 5 lessons into the enriched JSONB format. Your task is to ingest this content into the content_nodes table, build the "Unit Hub" page for Unit 1, and deploy the universal content-hierarchy.js component.
* Task 2.2: Migrate the Y8 Systems Unit. This is our most complex unit. Following the success of the Unit 1 migration, you will repeat the process for all lessons and resources in the y8-systems/ directory.
Priority 3 (Medium): The "Gold Standard" Content Creation
Goal: To continue the deep, creative work of building our next wave of exemplary units.
* Task 3.1: "The Witches" Unit. The English LAL and their team will continue building out the full suite of lessons and the comprehensive "Director's Workbooklet" (Standard and Tautoko editions).
* Task 3.2: "The Writer's Toolkit V3". The specialist kaiako will begin creating the new, modernized resources like the "Digital Source Autopsy" and the "Multi-modal Composition" planner.
3. ❗ Known Issues & Deeper Audit Findings
These are the remaining gaps that must be addressed after the priority work is complete.
* Incomplete User Onboarding: The registration flow is confusing. We need to implement the new /join.html landing page and the "Invitation Code" system as designed.
* Lack of Content Inter-linking: Resources are not yet connected to the lessons that use them. We need to build the "Part of These Units" component and the get_resource_connections RPC function.
* Missing "Trusted Tool" Polish: The platform is not yet a PWA, and it lacks the "First Time User" onboarding tour and the "Manage Your Data" privacy features.
* Project Ākonga is Un-built: The entire student assignment and tracking workflow is fully planned but has not yet been implemented.
This plan is focused. It is prioritized. It respects the work we have already done and provides a clear path to systematically professionalizing the entire platform. This is our map.
Te Kete Ako: The Complete Project Artifacts
This document is a comprehensive library of all technical and strategic artefacts designed for the Te Kete Ako V2.2 platform upgrade. Use the accompanying "Instructions for Claude Code" document as a guide to this library.
Phase 1.5: Professionalization & Core Utilities
Artefact: The Interactive Contact Form
File: js/contact-form.js
// This version provides a professional user experience with loading states and toast notifications.
document.addEventListener('DOMContentLoaded', () => {
 const form = document.getElementById('contact-form');
 const submitButton = form.querySelector('button[type="submit"]');

 form.addEventListener('submit', async (e) => {
   e.preventDefault();
   const originalButtonText = submitButton.textContent;
   submitButton.disabled = true;
   submitButton.innerHTML = `<span class="spinner"></span> Sending...`;

   const formProps = Object.fromEntries(new FormData(form));

   try {
     const { data, error } = await supabase.functions.invoke('handle-contact-form', { body: formProps });
     if (error) throw error;
     
     showToast(data.message, 'success');
     form.reset();
   } catch (error) {
     showToast('Sorry, an error occurred. Please try again.', 'error');
   } finally {
     submitButton.disabled = false;
     submitButton.innerHTML = originalButtonText;
   }
 });
});

function showToast(message, type = 'info') {
 const toast = document.createElement('div');
 toast.className = `toast toast-${type}`;
 toast.textContent = message;
 document.body.appendChild(toast);
 setTimeout(() => toast.remove(), 3000);
}

Artefact: The Automated Accessibility Gate
File: .github/workflows/staging-pr-check.yml
# This job runs on every Pull Request and blocks merging if critical accessibility violations are found.
 accessibility-check:
   name: 'Automated Accessibility Audit'
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v3
     # (Steps to build the site and serve it locally would go here)
     - name: 'Run Axe Accessibility Linter'
       run: npx @axe-core/cli http://localhost:8888 --exit

Project Whāriki (The Great Re-architecture)
Artefact: The Master content_nodes Table (SQL)
File: supabase/migrations/YYYYMMDDHHMMSS_create_content_nodes.sql
CREATE TYPE resource_type_v2 AS ENUM ('unit', 'lesson', 'handout', 'game', 'workbook', 'slides', 'puzzle', 'do-now', 'assessment');

CREATE TABLE content_nodes (
   id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
   slug TEXT UNIQUE NOT NULL,
   type resource_type_v2 NOT NULL,
   title TEXT NOT NULL,
   description TEXT,
   body_json JSONB,
   subject TEXT,
   year_level INT[],
   tags TEXT[],
   parent_id BIGINT REFERENCES public.content_nodes(id),
   created_at TIMESTAMPTZ DEFAULT NOW(),
   updated_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE content_nodes ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public can read content nodes" ON content_nodes FOR SELECT USING (true);

Artefact: The Automated Content Migration Script (Node.js)
File: scripts/migrate-content.js
const fs = require('fs');
const path = require('path');
const { JSDOM } = require('jsdom');
const { createClient } = require('@supabase/supabase-js');

// CONFIGURE THIS SCRIPT
const SUPABASE_URL = 'YOUR_SUPABASE_URL';
const SUPABASE_SERVICE_KEY = 'YOUR_SUPABASE_SERVICE_KEY';
const FOLDER_TO_MIGRATE = path.join(__dirname, '../handouts');
const CONTENT_TYPE = 'handout';

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

async function migrate() {
   const files = fs.readdirSync(FOLDER_TO_MIGRATE).filter(f => f.endsWith('.html'));
   for (const file of files) {
       // ... (logic to parse HTML and insert into Supabase as shown in previous turns) ...
   }
}
migrate();

Artefact: The Universal View Template & Router
File: view.html
<!DOCTYPE html>
<html lang="en">
<body>
   <header id="main-header"></header>
   <main id="content-container" class="container">
       <p>Loading content...</p>
   </main>
   <footer id="main-footer"></footer>
   <script src="/js/supabase-client.js"></script>
   <script src="/js/dynamic-content-renderer.js"></script>
</body>
</html>

File: js/dynamic-content-renderer.js
document.addEventListener('DOMContentLoaded', async () => {
   const slug = window.location.pathname.split('/').pop();
   const container = document.getElementById('content-container');
   const { data: node, error } = await supabase.from('content_nodes').select('*').eq('slug', slug).single();
   if (error || !node) {
       container.innerHTML = '<h1>404 - Content Not Found</h1>';
       return;
   }
   document.title = `${node.title} | Te Kete Ako`;
   // This will be expanded to a more sophisticated JSONB renderer
   container.innerHTML = node.body_json.html_content || 'Content not migrated yet.';
});

File: netlify.toml
[[redirects]]
 from = "/view/*"
 to = "/view.html"
 status = 200

File: public/_redirects
# Redirects for migrated content
/handouts/writers-toolkit-peel-argument-handout.html   /view/peel-argument-handout   301
# ... (add a line for every migrated file)

Project Ākonga & RBAC (The Student & Role System)
Artefact: The Full RBAC Database Schema (SQL)
-- Create the ENUM type for our four official roles
CREATE TYPE user_app_role AS ENUM ('student', 'teacher', 'caregiver', 'admin');

-- Create/Update the user_roles table
CREATE TABLE user_roles (
 id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
 user_id UUID UNIQUE NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
 role user_app_role NOT NULL DEFAULT 'student'
);
ALTER TABLE user_roles ENABLE ROW LEVEL SECURITY;

-- Create the trigger to auto-populate profiles and roles
create or replace function public.handle_new_user()
returns trigger as $$
begin
 insert into public.user_profiles (id, email) values (new.id, new.email);
 insert into public.user_roles (user_id, role) values (new.id, 'student');
 return new;
end;
$$ language plpgsql security definer;

create trigger on_auth_user_created
 after insert on auth.users
 for each row execute procedure public.handle_new_user();

-- Create the assignments and submissions tables
CREATE TABLE student_submissions (
 id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
 shared_link_id BIGINT NOT NULL REFERENCES public.shared_links(id) ON DELETE CASCADE,
 student_name TEXT NOT NULL,
 response_text TEXT,
 is_complete BOOLEAN DEFAULT FALSE,
 submitted_at TIMESTAMPTZ DEFAULT NOW()
);
ALTER TABLE student_submissions ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Teachers can view submissions for their own assignments"
ON student_submissions FOR SELECT USING (EXISTS (SELECT 1 FROM shared_links WHERE shared_links.id = student_submissions.shared_link_id AND shared_links.user_id = auth.uid()));

Artefact: The "Create Assignment" Edge Function
File: supabase/functions/create-assignment/index.ts
// ... (Full Edge Function code as designed in previous turns)

Artefact: The Teacher Dashboard RPC
File: supabase/migrations/YYYYMMDDHHMMSS_create_teacher_dashboard_rpc.sql
create or replace function get_teacher_dashboard_data()
returns json as $$
begin
 return (
   select json_agg(
     json_build_object(
       'share_code', sl.share_code,
       'expires_at', sl.expires_at,
       'resource_title', r.title,
       'submission_count', (select count(*) from student_submissions ss where ss.shared_link_id = sl.id)
     )
   )
   from shared_links sl
   join resources r on sl.resource_id = r.id
   where sl.user_id = auth.uid()
 );
end;
$$ language plpgsql;

Project Māramatanga (Intelligence & Communication)
Artefact: The Role-Aware Recommendation Engine (RPC)
create or replace function get_recommendations(p_resource_id BIGINT)
returns JSON as $$
DECLARE
 user_role TEXT;
 recommendations JSON;
BEGIN
 SELECT get_user_role(auth.uid()) INTO user_role;
 IF user_role = 'teacher' THEN
   -- ... (logic for horizontal, vertical, pedagogical recs) ...
 ELSIF user_role = 'student' THEN
   -- ... (logic for next/previous lesson pathway) ...
 ELSE
   recommendations = '[]'::json;
 END IF;
 RETURN recommendations;
END;
$$ LANGUAGE plpgsql;

Content & Unit Plans (Examples)
Artefact: The "Gold Standard" Lesson (JSONB)
For: content_nodes table body_json column
{
 "slug": "witches-lesson-1-1-recognizing",
 "type": "lesson",
 "title": "Lesson 1.1: How to Recognize a Witch",
 "parent_id": 101,
 "body_json": {
   "learning_objective": "Ākonga will analyze the narrator's descriptions to identify the key traits of a witch and evaluate his reliability as a storyteller.",
   "core_activities": [
     {
       "title": "Evidence Hunt",
       "content": "In pairs, students complete the 'Witch-Spotter's Field Guide' handout, finding textual evidence (quotes) for each of the five main traits Dahl describes."
     }
   ],
   "enrichment_components": {
     "kupu_matua": {
       "title": "Key Literary Terms",
       "terms": [ {"term": "Point of View", "definition": "The perspective from which a story is told."} ]
     },
     "stem_wero": {
       "title": "The Science of Disguise",
       "content": "Research one material modern special-effects artists use to create realistic masks (e.g., silicone, latex). Write two sentences explaining why its scientific properties make it good for this job."
     },
     "success_criteria": {
       "title": "What Success Looks Like",
       "criteria": [ "I can list the five main traits of a Dahl-witch, using evidence from the text." ]
     }
   },
   "supporting_resources": [
       {"title": "The Witch-Spotter's Field Guide", "slug": "handout-witch-spotters-guide"}
   ]
 }
}

Artefact: The "Tautoko Edition" Workbooklet Page (HTML for PDF)
<div class="workbook-page">
   <header class="page-header">
       <h2>Wāhanga 1: The Witch-Spotter's Checklist</h2>
   </header>
   <table class="field-guide-table">
       <thead>
           <tr>
               <th>Trait</th>
               <th>Textual Evidence (Quote from the Novel)</th>
               <th>My Field Sketch</th>
           </tr>
       </thead>
       <tbody>
           <tr>
               <td><strong>1. The Gloves</strong></td>
               <td class="evidence-cell"><em>"A REAL WITCH always wears gloves... because she doesn't have fingernails, only thin curvy claws, like a cat."</em></td>
               <td class="sketch-cell"></td>
           </tr>
       </tbody>
   </table>
   <section class="final-analysis">
       <p><strong>Sentence Starter:</strong> I think the narrator <strong>(is / is not)</strong> reliable because _________________________.</p>
       <textarea class="response-area"></textarea>
   </section>
</div>

Te Kete Ako - Implementation Sprint 1: Production Artefacts
Objective: To execute the first phase of the V2.2 Implementation Playbook, delivering the "Quick Wins" and beginning the foundational work of Project Whāriki.
Stream 1: "Quick Wins" - The Great Library (Status: COMPLETE)
Lead: Frontend & Full Stack Developers
Outcome: The vast library of orphaned handouts is now live and discoverable. The site's branding is now 100% consistent with a universal footer.
Artefact 1.1: The Live "Handouts Hub" Page
File: handouts.html (This file is now live on the server)
<!DOCTYPE html>
<html lang="en">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>Resource Library: Handouts | Te Kete Ako</title>
   <!-- Universal CSS & Fonts -->
   <link rel="stylesheet" href="/css/main.css">
</head>
<body>
   <header id="main-header"></header>

   <main class="container" data-animate-on-scroll>
       <h1>Resource Library: Handouts & Worksheets</h1>
       <p>Explore our full collection of printable and digital resources to support your teaching.</p>
       
       <div class="filter-controls">
           <span>Filter by Category:</span>
           <button class="filter-btn active" data-category="all">All</button>
           <button class="filter-btn" data-category="comprehension">Comprehension</button>
           <button class="filter-btn" data-category="writers-toolkit">Writer's Toolkit</button>
           <button class="filter-btn" data-category="media-literacy">Media Literacy</button>
           <button class="filter-btn" data-category="te-ao-maori">Te Ao Māori</button>
       </div>
       
       <div id="handouts-grid" class="resource-grid" data-stagger-children>
           <p>Loading resources...</p>
       </div>
   </main>

   <footer id="main-footer"></footer>

   <!-- Universal Scripts -->
   <script src="/js/supabase-client.js"></script>
   <script src="/js/streamlined-header.js"></script>
   <script src="/js/universal-footer.js"></script>
   <script src="/js/handouts-hub.js"></script>
   <script src="/js/utils/animate-on-scroll.js"></script>
</body>
</html>

Artefact 1.2: The "Handouts Hub" Logic
File: js/handouts-hub.js (This script is now live)
document.addEventListener('DOMContentLoaded', async () => {
 const container = document.getElementById('handouts-grid');
 const filterControls = document.querySelector('.filter-controls');
 let allHandouts = [];

 // 1. Fetch all handouts on page load
 const { data, error } = await supabase.from('resources').select('*').eq('type', 'handout');
 if (error) {
   container.innerHTML = '<p class="error">Could not load resources at this time.</p>';
   return;
 }
 allHandouts = data;

 // 2. Render all handouts initially
 renderHandouts(allHandouts);

 // 3. Add click listener for the filter buttons
 filterControls.addEventListener('click', (e) => {
   if (e.target.tagName !== 'BUTTON') return;

   filterControls.querySelector('.active').classList.remove('active');
   e.target.classList.add('active');

   const category = e.target.dataset.category;
   const filtered = category === 'all'
     ? allHandouts
     : allHandouts.filter(handout => handout.tags && handout.tags.includes(category));
   
   renderHandouts(filtered);
 });

 function renderHandouts(handouts) {
   container.innerHTML = '';
   if (handouts.length === 0) {
       container.innerHTML = '<p>No resources found for this category.</p>';
       return;
   }
   handouts.forEach(handout => {
     const card = document.createElement('div');
     card.className = 'card';
     card.setAttribute('data-animate-on-scroll', ''); // For our animation system
     card.innerHTML = `
       <h3>${handout.title}</h3>
       <p>${handout.description}</p>
       <a href="${handout.path}" class="card-link">View Handout</a>
     `;
     container.appendChild(card);
   });
   // Re-initialize animations for the newly added cards
   window.dispatchEvent(new CustomEvent('content-loaded'));
 }
});

Artefact 1.3: The Universal Footer Component
File: js/universal-footer.js (This script is now loaded on every page)
document.addEventListener('DOMContentLoaded', () => {
 const footerPlaceholder = document.getElementById('main-footer');
 if (!footerPlaceholder) return;

 const footerHTML = `
   <div class="footer-content container">
       <div class="footer-brand">
           <h4>Te Kete Ako</h4>
           <p>He waka eke noa.<br/>We are all in this together.</p>
       </div>
       <div class="footer-links">
           <h4>Quick Links</h4>
           <ul>
               <li><a href="/unit-plans.html">Unit Plans</a></li>
               <li><a href="/handouts.html">Handouts</a></li>
               <li><a href="/games.html">Games</a></li>
               <li><a href="/contact.html">Contact Us</a></li>
           </ul>
       </div>
       <div class="footer-meta">
           <p>© ${new Date().getFullYear()} Mangakotukutuku College</p>
           <p><a href="/privacy-policy.html">Privacy Policy</a></p>
       </div>
   </div>
 `;
 
 footerPlaceholder.innerHTML = footerHTML;
});

Stream 2: Project Whāriki - The Foundation (Status: IN PROGRESS)
Lead: Tech Lead & Database Specialist
Outcome: The foundational database table for our new content architecture is live, and the automated migration script has been successfully tested on the "Writer's Toolkit" content.
Artefact 2.1: The Master content_nodes Table
Action: The following SQL migration has been successfully applied to the production database.
CREATE TYPE resource_type_v2 AS ENUM ('unit', 'lesson', 'handout', 'game', 'workbook', 'slides', 'puzzle', 'do-now', 'assessment');

CREATE TABLE content_nodes (
   id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
   slug TEXT UNIQUE NOT NULL,
   type resource_type_v2 NOT NULL,
   title TEXT NOT NULL,
   description TEXT,
   body_json JSONB, -- Storing content as structured JSON
   subject TEXT,
   year_level INT[],
   tags TEXT[],
   parent_id BIGINT REFERENCES public.content_nodes(id),
   created_at TIMESTAMPTZ DEFAULT NOW(),
   updated_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE content_nodes ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public can read content nodes" ON content_nodes FOR SELECT USING (true);

Verification: The content_nodes table is now visible in the Supabase dashboard and is ready to receive content. The migration of the "Writer's Toolkit" is the next immediate task, which will be followed by the build-out of the dynamic rendering engine.
This sprint has delivered immediate, high-impact value to our users while simultaneously laying the critical groundwork for the future of the platform.
Te Kete Ako - Comprehensive Site Audit for Claude Code
Auditor: Gemini
Date: 26 July 2025
Purpose: To provide a comprehensive, actionable audit of the tekete.netlify.app platform. This document identifies all remaining inconsistencies, bugs, and areas for professionalization, with specific file references and remediation plans.
1. Foundational & Architectural Issues
1.1. The "Static Content" Problem (CRITICAL)
* Finding: The single largest issue is that the majority of our content (lessons, handouts, units) still exists as individual, static HTML files. This is the root cause of almost all other inconsistencies.
* Solution: Project Whāriki. The highest priority is to execute the "Great Content Migration" as outlined in the te-kete-ako-next-phase-plan document. This involves moving all content to the content_nodes database and implementing the dynamic rendering engine.
1.2. Incomplete User Profile & Role System (HIGH)
* Finding: The authentication system is functional, but the Role-Based Access Control (RBAC) is not fully implemented. The handle_new_user trigger is designed but may not be live. The UI does not yet fully adapt based on user roles (Teacher, Student, etc.).
* Solution: Implement the full RBAC architecture.
   * Verify the handle_new_user trigger is active on the Supabase instance.
   * Build the Admin User Management Dashboard.
   * Implement the js/session-manager.js logic to create a role-aware UI across the entire site.
2. User Experience & UI Polish
2.1. Inconsistent Page Layouts (Medium)
* Finding: While new content is being built with the universal template, many older pages (english-literacy-progression-framework.html, toolkit.html, etc.) still use legacy styling, headers, and footers.
* Solution: Accelerate the Project Whāriki migration. For any page that cannot be immediately migrated, manually apply the universal header and footer components (streamlined-header.js, universal-footer.js) as a temporary fix.
2.2. Lack of Interactive Feedback (Medium)
* Finding: Many forms and buttons (login, register, search) lack modern user feedback like loading spinners and toast notifications. This makes the site feel slow and unresponsive.
* Solution: Systematically refactor all form submission logic to follow the pattern established in the js/contact-form.js artefact. Implement a global showToast() function and a setButtonLoading() utility.
2.3. "Empty State" Gaps (Low)
* Finding: Pages like "My Kete" or the future "Teacher Dashboard" do not have well-designed "empty states" for new users. They simply show a blank space or a plain "no items" message.
* Solution: Design and implement the "Empty State" components as planned. This is a crucial part of user onboarding and making new features feel welcoming.
3. Content & Game Integration
3.1. Orphaned Games & Activities (High)
* Finding: The audit confirms that several high-quality games (countdown-letters.html, english-wordle.html) and activities (do-now-activities folder) are complete but are not linked from any of the main hub pages.
* Solution: Execute the "Quick Wins" sprints immediately. Use the provided SQL INSERT statements to add these resources to the resources table so they appear on games.html and the new do-now.html hub.
3.2. Outdated "Writer's Toolkit" (High)
* Finding: The content within the "Writer's Toolkit" handouts is outdated and not fit for a 2025 educational context.
* Solution: The Kaiako Task Force must prioritize the complete rewrite of this unit, focusing on the new pillars of "Critical Consumption," "Fundamental Construction," and "Modern Composition." The new resources, like the "Digital Source Autopsy," must be created before this section is migrated.
4. Professional Polish & Trust
4.1. No Offline Capability (Medium)
* Finding: The site is not a Progressive Web App (PWA) and does not work offline. This is a major weakness for a tool intended for use in schools with potentially unreliable Wi-Fi.
* Solution: Implement the PWA architecture.
   * Create and link the manifest.json file.
   * Create and register the sw.js (Service Worker) to enable cache-first offline access for visited resources.
4.2. Missing Privacy & Data Management (High)
* Finding: The site lacks a formal privacy-policy.html page and does not provide users with the ability to manage or delete their own data. This is a critical trust and potential legal issue.
* Solution:
   * The Kaiako team must draft a clear, human-readable Privacy Policy.
   * The development team must build the "Manage Your Data" section in the user profile, including the secure delete-user-account Edge Function.
This audit provides a clear, prioritized list of the remaining work required to bring Te Kete Ako to a truly professional, complete, and trustworthy state.
Te Kete Ako - V2.2 Authentication & Security Architecture
Auditor: Tech Lead
Date: 26 July 2025
Status: APPROVED. This document supersedes all previous authentication audits. It provides a complete, end-to-end architectural plan for a secure, professional, and user-friendly authentication and profile management system.
Pillar 1: The Registration & Onboarding Flow
The Goal: To create a seamless, secure, and welcoming first experience for new users, ensuring their profile and role are correctly established from the very first click.
Finding 1.1: Incomplete User Profile Creation (High Severity)
Problem: A user can sign up, but their corresponding profile in our application's tables (user_profiles, user_roles) is not created, leaving them in a broken state.
Solution: A database trigger will automatically create these profiles the instant a new user is confirmed in Supabase's auth.users table.
Artefact 1.1.1: The Profile Creation Trigger (SQL)
-- This function runs automatically after a new user signs up.
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
 -- Create a corresponding row in our user_profiles table
 insert into public.user_profiles (id, email)
 values (new.id, new.email);
 
 -- Also create a default role for the new user in our user_roles table
 insert into public.user_roles (user_id, role)
 values (new.id, 'student'); -- Default all new sign-ups to 'student' role. Admins can change this later.
 
 return new;
end;
$$;

-- Create the trigger that calls the function
create trigger on_auth_user_created
 after insert on auth.users
 for each row execute procedure public.handle_new_user();

Finding 1.2: Clunky UI & Lack of Feedback (Medium Severity)
Problem: The registration form provides no feedback. Users don't know if their submission is processing or if an error occurred.
Solution: The registration form will be powered by asynchronous JavaScript, providing instant validation and clear feedback (loading states, success/error toasts).
Artefact 1.2.1: The Modernized Registration Logic (JavaScript)
File: js/auth.js (add this new logic block)
// --- REGISTRATION FORM LOGIC ---
const registerForm = document.getElementById('register-form');
if (registerForm) {
   registerForm.addEventListener('submit', async (e) => {
       e.preventDefault();
       const email = e.target.email.value;
       const password = e.target.password.value;
       const submitButton = e.target.querySelector('button[type="submit"]');
       
       setButtonLoading(submitButton, true, 'Registering...');

       const { error } = await supabase.auth.signUp({ email, password });

       if (error) {
           showToast(`Registration failed: ${error.message}`, 'error');
           setButtonLoading(submitButton, false, 'Create Account');
       } else {
           // Supabase sends a confirmation email. We must inform the user.
           showToast('Registration successful! Please check your email to confirm your account.', 'success');
           registerForm.reset();
       }
   });
}

Pillar 2: The Login & Session Management Flow
The Goal: To provide a fast, secure, and reliable login experience, and to correctly manage the user's session state across the application.
Finding 2.1: Insecure Session Handling (High Severity)
Problem: We are not explicitly handling session refreshes. A user could be logged in for a long time, and their access token could expire, leading to unexpected errors when they try to perform an action.
Solution: We will use Supabase's built-in onAuthStateChange listener. This is the single source of truth for a user's session. It will automatically handle token refreshes in the background and allow our UI to react instantly to login or logout events anywhere on the site.
Artefact 2.1.1: The Global Session Manager (JavaScript)
File: js/session-manager.js (This new file should be loaded on every page)
// js/session-manager.js

// This is the single source of truth for the user's auth state.
supabase.auth.onAuthStateChange((event, session) => {
   const user = session?.user;
   updateHeaderUI(user); // A function to show/hide login/logout/profile buttons

   if (event === 'SIGNED_IN') {
       // If the user has just signed in, we might want to redirect them
       // based on their role, which is now in their token.
       const userRole = user.user_metadata?.role || 'student';
       if (window.location.pathname.includes('/login.html')) {
           redirectToDashboard(userRole);
       }
   } else if (event === 'SIGNED_OUT') {
       // If the user signed out, redirect them to the homepage.
       if (!window.location.pathname.includes('/index.html')) {
           window.location.href = '/';
       }
   }
});

function redirectToDashboard(role) {
   if (role === 'teacher') window.location.href = '/teacher-dashboard.html';
   else if (role === 'student') window.location.href = '/student-dashboard.html';
   // ... etc. for other roles
   else window.location.href = '/';
}

function updateHeaderUI(user) {
   // Logic to show/hide nav links based on whether 'user' object exists.
}

Pillar 3: The Profile Management Flow
The Goal: To give users full control over their own application-specific data in a secure and intuitive way.
Finding 3.1: No Password Change Functionality (High Severity)
Problem: A logged-in user cannot change their password. This is a basic security feature.
Solution: We will add the password change logic to the profile-manager.js script.
Artefact 3.1.1: The Password Change Logic (JavaScript)
File: js/profile-manager.js (add this logic)
// Add this inside the DOMContentLoaded listener in js/profile-manager.js
document.getElementById('password-change-form').addEventListener('submit', async (e) => {
   e.preventDefault();
   const newPassword = document.getElementById('new-password').value;
   if (!newPassword || newPassword.length < 6) {
       showToast('Password must be at least 6 characters long.', 'error');
       return;
   }

   const { error } = await supabase.auth.updateUser({ password: newPassword });

   if (error) {
       showToast(`Error: ${error.message}`, 'error');
   } else {
       showToast('Password updated successfully!', 'success');
       e.target.reset();
   }
});

Finding 3.2: No Data Deletion / "Right to be Forgotten" (Medium Severity)
Problem: A user cannot delete their account. This is a major trust and privacy issue, and a legal requirement in many jurisdictions.
Solution: We will create a secure Edge Function that allows a user to permanently delete their own account and all associated data. This action must be protected and cannot be done from the client-side alone.
Artefact 3.2.1: The Account Deletion Endpoint (Edge Function)
File: supabase/functions/delete-user-account/index.ts
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'

serve(async (req) => {
 const supabase = createClient(
   Deno.env.get('SUPABASE_URL')!,
   Deno.env.get('SUPABASE_ANON_KEY')!,
   { global: { headers: { Authorization: req.headers.get('Authorization')! } } }
 );

 // 1. Get the user from their token. This ensures they can only delete themselves.
 const { data: { user } } = await supabase.auth.getUser();
 if (!user) { return new Response('Forbidden', { status: 403 }); }

 // 2. Use the admin client to perform the deletion.
 const supabaseAdmin = createClient(
   Deno.env.get('SUPABASE_URL')!,
   Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!
 );
 
 const { error } = await supabaseAdmin.auth.admin.deleteUser(user.id);
 // The 'ON DELETE CASCADE' in our database schema will automatically clean up
 // their profile, roles, kete items, etc.

 if (error) { return new Response(JSON.stringify(error), { status: 500 }); }

 return new Response('Account deleted successfully.', { status: 200 });
})

This in-depth architecture provides a complete, secure, and professional user lifecycle management system.
Te Kete Ako - Project Tūhura: The Discovery & Navigation System
"Tūhura" means to discover, explore, and bring to light.
Objective: To architect and implement a sophisticated, intuitive, and visually engaging navigation system that allows teachers and students to effortlessly discover content and understand its relationship within the wider curriculum.
The Problem: The "Library without a Map"
We have successfully planned the migration of our content into a unified database. This is a huge technical win. However, without a powerful navigation system, we will have simply created a digital warehouse. A user landing on a lesson page has no clear sense of where they are in a unit, what comes next, or how this lesson connects to the bigger picture. This is a critical failure in user experience.
Project Tūhura will fix this by building a three-layered navigation system.
Layer 1: The "Unit Hub" - The Central Marae for Each Unit
The Vision: Every major unit (like "The Witches" or "Y8 Systems") will have its own dedicated, beautiful landing page. This "Unit Hub" is not just a list of lessons; it's a dashboard that tells the story of the unit.
Artefact 1.1: The Unit Hub UI/UX Design
Action: The UI/UX Designer will create a new template for these hub pages.
HTML Structure Snippet (unit-hub-template.html):
<!-- This is the master template for all Unit Hub pages -->
<header class="unit-hub-header" style="background-image: url('{{UNIT_COVER_IMAGE}}');">
   <div class="container">
       <h1 class="unit-title">{{UNIT_TITLE}}</h1>
       <p class="unit-description">{{UNIT_DESCRIPTION}}</p>
   </div>
</header>

<main class="container">
   <div class="unit-hub-layout">
       <section class="lesson-sequence-panel">
           <h2>Learning Pathway</h2>
           <ol class="lesson-list">
               <!-- JS will render the full lesson sequence here -->
           </ol>
       </section>
       <aside class="unit-resources-panel">
           <h3>Key Resources for this Unit</h3>
           <ul id="unit-key-resources">
               <!-- JS will render links to the workbooklet, games, etc. -->
           </ul>
       </aside>
   </div>
</main>

Artefact 1.2: The Database Foundation (Content Hierarchy)
Action: The Database Specialist will update our content_nodes table to support this parent-child relationship.
SQL Migration Snippet:
-- This migration adds the crucial 'parent_id' to create our hierarchy.
ALTER TABLE public.content_nodes
ADD COLUMN parent_id BIGINT REFERENCES public.content_nodes(id) ON DELETE SET NULL;

-- Create an index for faster lookups of child resources.
CREATE INDEX idx_content_nodes_parent_id ON public.content_nodes(parent_id);

Artefact 1.3: The Backend Engine (The "Package" RPC)
Action: The Backend Developer will create a powerful RPC function to fetch all the data for a unit in a single, efficient call.
SQL RPC Function Snippet:
-- This function is the engine for the entire Unit Hub page.
create or replace function get_unit_package(p_unit_slug text)
returns json as $$
declare
 unit_details json;
 child_resources json;
begin
 -- First, get the main unit's details
 select to_jsonb(c) into unit_details from content_nodes c where c.slug = p_unit_slug;

 -- Second, get all child resources linked to this unit's ID
 select jsonb_agg(
   jsonb_build_object(
     'id', child.id,
     'title', child.title,
     'type', child.type,
     'slug', child.slug,
     'description', child.description
   ) order by child.title asc
 ) into child_resources
 from content_nodes child
 where child.parent_id = (unit_details->>'id')::bigint;

 -- Finally, combine them into a single JSON response object
 return jsonb_build_object(
   'unit', unit_details,
   'children', coalesce(child_resources, '[]'::jsonb)
 );
end;
$$ language plpgsql;

Layer 2: The "Content Hierarchy" Component - The GPS
The Vision: When a user is on a lesson page, they should never feel lost. We will build a universal, dynamic component that shows them exactly where they are.
Artefact 2.1: The UI/UX Design
This component will appear at the top of every lesson and handout page. It has two parts: a "breadcrumb" trail showing the path, and a "sequence" visualizer showing progress.
HTML Structure Snippet (to be injected by JS):
<div class="content-hierarchy-container">
   <!-- Part 1: The Breadcrumb Trail -->
   <nav class="breadcrumb">
       <a href="/unit-plans.html">Unit Plans</a>
       <span>→</span>
       <a href="/view/{{UNIT_SLUG}}">{{UNIT_TITLE}}</a>
       <span>→</span>
       <span>{{LESSON_TITLE}}</span>
   </nav>
   <!-- Part 2: The Visual Sequence -->
   <div class="lesson-sequence">
       <!-- JS will generate 5 circles, highlighting the current one -->
       <div class="sequence-item completed">1</div>
       <div class="sequence-item active">2</div>
       <div class="sequence-item">3</div>
       <div class="sequence-item">4</div>
       <div class="sequence-item">5</div>
   </div>
</div>

Artefact 2.2: The Frontend Logic
Action: The Frontend Developer will create a new global script to power this component.
File: js/content-hierarchy.js
document.addEventListener('DOMContentLoaded', async () => {
   // This script assumes it's running on a dynamic 'view.html' page
   const slug = window.location.pathname.split('/').pop();
   const { data: node, error } = await supabase.from('content_nodes').select('*, parent:parent_id(*)').eq('slug', slug).single();

   if (error || !node || !node.parent) return; // Only run on content with a parent unit

   const container = document.getElementById('content-hierarchy-container'); // A placeholder div on the page
   
   // Logic to build the breadcrumb and sequence HTML using the 'node' and 'node.parent' data
   // ...
   
   container.innerHTML = generatedHtml;
});

Layer 3: The "Smart Link" - The Interconnection
The Vision: Our content should be a web, not a series of tubes. We will build an intelligent system that automatically links key terms and concepts within the body of our content.
Artefact 3.1: The "Smart Link" Renderer
Action: The Frontend Developer will create a new utility function that can take a block of text and automatically turn key terms into links.
File: js/utils/smart-linker.js
// This is a conceptual example. A real implementation would be more robust.
const keyTerms = {
   "Te Tiriti o Waitangi": "/view/treaty-of-waitangi-handout",
   "Mātauranga Māori": "/view/matauranga-maori-intro",
   "PEEL paragraph": "/view/writers-toolkit-peel-argument"
};

/**
* Takes a block of HTML and automatically links key terms.
* @param {string} htmlContent - The raw HTML content from the database.
* @returns {string} The HTML with key terms converted to <a> tags.
*/
export function createSmartLinks(htmlContent) {
   let processedHtml = htmlContent;
   for (const term in keyTerms) {
       const url = keyTerms[term];
       // Use a Regex to find the term but avoid replacing it inside existing links
       const regex = new RegExp(`\\b(${term})\\b(?![^<]*?>)`, 'gi');
       processedHtml = processedHtml.replace(regex, `<a href="${url}" class="smart-link">${term}</a>`);
   }
   return processedHtml;
}

// Our dynamic renderer would then use this function before displaying content:
// container.innerHTML = createSmartLinks(node.body_html);

This three-layered system—The Hub, The GPS, and The Interconnection—is our comprehensive solution to the challenge of navigation and discovery. It will transform our platform into an intuitive, interconnected kete of knowledge.
Te Kete Ako - Authentication & Security Audit
Auditor: Tech Lead
Date: 26 July 2025
Status: CRITICAL. While basic login/logout functionality exists, the system lacks the security, user feedback, and profile management features required for a professional-grade platform. This audit outlines the critical gaps and the plan to remediate them.
Finding #1: Incomplete User Profile Creation (High Severity)
The Problem: When a new user signs up, an entry is created in Supabase's auth.users table, but our system fails to create a corresponding entry in our own public.user_profiles table. This means we have no place to store application-specific data for that user, such as their name, school, or, most importantly, their role (teacher, student, etc.). This is the root cause of our inability to implement proper Role-Based Access Control (RBAC).
The Solution: We will use a Supabase Database Trigger. This is the most secure and reliable method. A small SQL function will automatically run after a new user is added to auth.users, and it will create their profile for them.
Artefact 1.1: The Profile Creation Trigger (SQL)
Action: The Database Specialist will create a new migration file with the following content. This is a one-time setup that solves the problem for all future sign-ups.
-- This function will be triggered every time a new user signs up.
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
 -- Create a corresponding row in our user_profiles table
 insert into public.user_profiles (id, email)
 values (new.id, new.email);
 
 -- Also create a default role for the new user in our user_roles table
 insert into public.user_roles (user_id, role)
 values (new.id, 'student'); -- Default all new sign-ups to 'student' role.
 
 return new;
end;
$$;

-- Create the trigger that calls the function
create trigger on_auth_user_created
 after insert on auth.users
 for each row execute procedure public.handle_new_user();

Finding #2: Lack of User Feedback & State Management (Medium Severity)
The Problem: The current login and registration forms are "dumb." When a user clicks "Log In," the page does a full reload. There are no loading spinners, no success messages, and no clear error handling (e.g., "Invalid password"). This feels clunky, slow, and unprofessional.
The Solution: We will upgrade our authentication forms to use modern, asynchronous JavaScript. They will provide immediate feedback to the user without a full page refresh, using the "toast notification" and "spinner button" components we've already designed.
Artefact 2.1: The Modernized Login Logic
Action: The Frontend Developer will create a new js/auth.js file to handle all authentication forms.
File: js/auth.js
// This script will handle login.html, register.html, etc.

// --- LOGIN FORM LOGIC ---
const loginForm = document.getElementById('login-form');
if (loginForm) {
   loginForm.addEventListener('submit', async (e) => {
       e.preventDefault();
       const email = e.target.email.value;
       const password = e.target.password.value;
       const submitButton = e.target.querySelector('button[type="submit"]');
       
       // Provide immediate feedback
       setButtonLoading(submitButton, true);

       const { error } = await supabase.auth.signInWithPassword({ email, password });

       if (error) {
           showToast(`Login failed: ${error.message}`, 'error');
           setButtonLoading(submitButton, false);
       } else {
           showToast('Login successful! Redirecting...', 'success');
           // Redirect to the user's dashboard after a short delay
           setTimeout(() => window.location.href = '/teacher-dashboard.html', 1000);
       }
   });
}

// --- UTILITY FUNCTIONS ---
function setButtonLoading(button, isLoading) {
   if (isLoading) {
       button.disabled = true;
       button.innerHTML = `<span class="spinner"></span> Loading...`;
   } else {
       button.disabled = false;
       button.innerHTML = 'Log In'; // Or original text
   }
}

// Assume showToast() utility exists

Finding #3: No User Profile Management (Medium Severity)
The Problem: Once a user has an account, they have absolutely no way to manage it. They cannot change their email, update their name, or manage their password. This is a fundamental feature of any modern web application.
The Solution: We will create a new, dedicated "My Profile" page where users can view and update their own information.
Artefact 3.1: The "My Profile" Page
Action: The Full Stack Developer will create the profile.html page and its corresponding script.
File: profile.html
<main class="container">
   <h1>My Profile</h1>
   <form id="profile-form">
       <div class="form-group">
           <label for="profile-email">Email Address</label>
           <input type="email" id="profile-email" disabled> <!-- Email is not directly editable -->
       </div>
       <div class="form-group">
           <label for="profile-name">Full Name</label>
           <input type="text" id="profile-name">
       </div>
       <div class="form-group">
           <label for="profile-school">School</label>
           <input type="text" id="profile-school">
       </div>
       <button type="submit" class="btn-primary">Save Profile</button>
   </form>
   
   <hr>
   
   <h3>Change Password</h3>
   <form id="password-change-form">
       <div class="form-group">
           <label for="new-password">New Password</label>
           <input type="password" id="new-password">
       </div>
       <button type="submit" class="btn-secondary">Update Password</button>
   </form>
</main>
<script src="/js/profile-manager.js"></script>

File: js/profile-manager.js
document.addEventListener('DOMContentLoaded', async () => {
   // 1. Fetch and populate the user's current profile data
   const user = supabase.auth.user();
   const { data: profile, error } = await supabase
       .from('user_profiles')
       .select('full_name, school')
       .eq('id', user.id)
       .single();
   
   document.getElementById('profile-email').value = user.email;
   document.getElementById('profile-name').value = profile.full_name;
   document.getElementById('profile-school').value = profile.school;

   // 2. Add event listener to handle profile updates
   document.getElementById('profile-form').addEventListener('submit', async (e) => {
       e.preventDefault();
       const updates = {
           id: user.id,
           full_name: document.getElementById('profile-name').value,
           school: document.getElementById('profile-school').value,
           updated_at: new Date()
       };
       // 'upsert' will create or update the profile
       const { error } = await supabase.from('user_profiles').upsert(updates);
       if (error) showToast('Error saving profile.', 'error');
       else showToast('Profile saved successfully!', 'success');
   });
   
   // 3. Add event listener for password changes
   // ... (similar logic for the password change form) ...
});

This audit provides a clear, actionable path to elevating our authentication and profile systems to a professional, secure, and user-friendly standard.
Te Kete Ako - Quick Wins Sprint v2: The Great Library
Objective: To continue delivering immediate, tangible value by unlocking our single largest category of orphaned content—the general handouts—and by standardizing a critical piece of our site-wide branding: the footer.
Quick Win #1: Activate the Full Handouts Library
The Problem: Our handouts directory contains over 50 high-quality, standalone resources, from comprehension sheets to the entire "Writer's Toolkit." Currently, they are almost completely undiscoverable. This is our biggest trove of untapped value.
The Solution: We will transform the handouts.html page from a simple list into a powerful, filterable "Resource Library." This will make it easy for teachers to find exactly what they need.
Artefact 1.1: The "Handouts Hub" Page Upgrade
Action: The Frontend Developer will replace the content of handouts.html with this new, dynamic structure.
<!-- handouts.html -->
<main class="container">
   <h1>Resource Library: Handouts & Worksheets</h1>
   <p>Explore our full collection of printable and digital resources to support your teaching.</p>
   
   <div class="filter-controls">
       <span>Filter by Category:</span>
       <button class="filter-btn active" data-category="all">All</button>
       <button class="filter-btn" data-category="comprehension">Comprehension</button>
       <button class="filter-btn" data-category="writers-toolkit">Writer's Toolkit</button>
       <button class="filter-btn" data-category="media-literacy">Media Literacy</button>
       <button class="filter-btn" data-category="te-ao-maori">Te Ao Māori</button>
   </div>
   
   <div id="handouts-grid" class="resource-grid">
       <!-- JavaScript will render the handout cards here -->
   </div>
</main>
<script src="/js/handouts-hub.js"></script>


Artefact 1.2: Database Population for Handouts (SQL)
Action: The Full Stack Developer will execute a SQL script to add all our orphaned handouts to the resources table. The addition of relevant tags is the most critical part of this step, as it powers the filtering.
-- This is a sample of the full script. It would include all 50+ handouts.
-- Ensure the 'handout' type is part of your 'resource_type' ENUM.

INSERT INTO resources (type, title, description, path, tags, subject) VALUES
(
 'handout', 
 'PEEL Argument Handout', 
 'A guide to structuring powerful paragraphs using the Point, Evidence, Explain, Link method.', 
 '/handouts/writers-toolkit-peel-argument-handout.html',
 ARRAY['writers-toolkit', 'english', 'argument-writing'],
 'English'
),
(
 'handout', 
 'Digital Source Autopsy', 
 'A modern critical thinking framework for analyzing online information.', 
 '/handouts/digital-source-autopsy-handout.html', -- Assuming we create this new, updated one
 ARRAY['media-literacy', 'digital-citizenship', 'social-sciences'],
 'Social Sciences'
),
(
 'handout', 
 'Youth Vaping Comprehension', 
 'A topical reading comprehension resource with questions, perfect for a health class or as a non-fiction text.', 
 '/handouts/youth-vaping-comprehension-handout.html',
 ARRAY['comprehension', 'health', 'non-fiction'],
 'Health & PE'
),
(
 'handout', 
 'Māori Geometric Patterns', 
 'An exploration of the mathematics and symbolism behind traditional Māori patterns like kōwhaiwhai.', 
 '/handouts/maori-geometric-patterns-handout.html',
 ARRAY['te-ao-maori', 'mathematics', 'art'],
 'Te Ao Māori'
);


Artefact 1.3: The Hub Page Filtering Logic
Action: The Frontend Developer will create the script to power the new, filterable hub page.
File: js/handouts-hub.js
document.addEventListener('DOMContentLoaded', async () => {
 const container = document.getElementById('handouts-grid');
 const filterControls = document.querySelector('.filter-controls');
 let allHandouts = [];

 // 1. Fetch all handouts on page load
 const { data, error } = await supabase.from('resources').select('*').eq('type', 'handout');
 if (error) { /* Handle error */ return; }
 allHandouts = data;

 // 2. Render all handouts initially
 renderHandouts(allHandouts);

 // 3. Add click listener for the filter buttons
 filterControls.addEventListener('click', (e) => {
   if (e.target.tagName !== 'BUTTON') return;

   // Update active button style
   filterControls.querySelector('.active').classList.remove('active');
   e.target.classList.add('active');

   const category = e.target.dataset.category;
   if (category === 'all') {
     renderHandouts(allHandouts);
   } else {
     const filtered = allHandouts.filter(handout => handout.tags.includes(category));
     renderHandouts(filtered);
   }
 });

 function renderHandouts(handouts) {
   container.innerHTML = '';
   if (handouts.length === 0) {
       container.innerHTML = '<p>No resources found for this category.</p>';
       return;
   }
   handouts.forEach(handout => {
     const card = document.createElement('div');
     card.className = 'card';
     card.innerHTML = `
       <h3>${handout.title}</h3>
       <p>${handout.description}</p>
       <a href="${handout.path}" class="card-link">View Handout</a>
     `;
     container.appendChild(card);
   });
 }
});


Quick Win #2: The Universal Footer
The Problem: Our footers are inconsistent. Some pages have old ones, some have none. This is a small but significant branding and trust issue.
The Solution: We will create a single, dynamic footer component that is loaded via JavaScript onto every page, ensuring 100% consistency.
Artefact 2.1: The Universal Footer Component
Action: The Frontend Developer will create this new JavaScript file.
File: js/universal-footer.js
document.addEventListener('DOMContentLoaded', () => {
 const footerPlaceholder = document.getElementById('main-footer');
 if (!footerPlaceholder) return;

 const footerHTML = `
   <div class="footer-content container">
       <div class="footer-brand">
           <h4>Te Kete Ako</h4>
           <p>He waka eke noa.<br/>We are all in this together.</p>
       </div>
       <div class="footer-links">
           <h4>Quick Links</h4>
           <ul>
               <li><a href="/unit-plans.html">Unit Plans</a></li>
               <li><a href="/handouts.html">Handouts</a></li>
               <li><a href="/games.html">Games</a></li>
               <li><a href="/contact.html">Contact Us</a></li>
           </ul>
       </div>
       <div class="footer-meta">
           <p>© ${new Date().getFullYear()} Mangakotukutuku College</p>
           <p><a href="/privacy-policy.html">Privacy Policy</a></p>
       </div>
   </div>
 `;
 
 footerPlaceholder.innerHTML = footerHTML;
});


Artefact 2.2: The HTML Integration
Action: The Full Stack Developer will ensure our master-template.html (and any remaining static pages) includes the placeholder <footer> and the new script.
<!-- In master-template.html, before the closing </body> tag -->

   <footer id="main-footer" class="site-footer">
       <!-- Universal footer content will be loaded here by JavaScript -->
   </footer>

   <!-- ... other scripts ... -->
   <script src="/js/universal-footer.js"></script>
</body>


This second sprint of quick wins will have a massive impact, making our vast library of handouts finally accessible and ensuring a professional, consistent brand presence on every single page of the site.
Te Kete Ako - Quick Wins: Resource Integration Sprint
Objective: To deliver immediate, tangible value to users by integrating all high-quality, orphaned games and standalone activities into the live platform. This is a parallel task that can be executed while the core architectural work of Project Whāriki continues.
Guiding Principle: Unlock Existing Value
We have dozens of excellent, completed resources that are currently invisible to our users. This sprint is about making them discoverable. We will use our existing resources table and dynamic hub pages (games.html, handouts.html) to achieve this quickly.
Quick Win #1: Activate the Full Games Arcade
The Problem: Our games.html page is live, but it only shows a fraction of the games we've built.
The Solution: We will add the remaining high-quality games to our resources database. They will appear on the games hub instantly.
Artefact 1.1: Database Population for Games (SQL)
Action: The Full Stack Developer will execute the following SQL script to add our orphaned games to the platform.
-- This script adds the remaining completed games to the 'resources' table.
-- Ensure the 'game' type is part of your 'resource_type' ENUM.

INSERT INTO resources (type, title, description, path, tags, subject) VALUES
(
 'game', 
 'Countdown Letters', 
 'A classic word-finding game against the clock. How many words can you make from the nine letters?', 
 '/games/countdown-letters.html',
 ARRAY['english', 'literacy', 'vocabulary', 'timer'],
 'English'
),
(
 'game', 
 'English Wordle', 
 'The classic five-letter word guessing game. A new puzzle every day.', 
 '/games/english-wordle.html',
 ARRAY['english', 'literacy', 'vocabulary', 'puzzle'],
 'English'
),
(
 'game', 
 'Spelling Bee', 
 'A fun and challenging spelling game to test your vocabulary and accuracy against a ticking clock.', 
 '/games/spelling-bee.html',
 ARRAY['english', 'literacy', 'spelling'],
 'English'
);

Immediate Impact: The games.html page will now show a richer, more complete library of activities for students and teachers.
Quick Win #2: Surface the "Do Now" Activities
The Problem: We have a folder of excellent, 5-minute "Do Now" activities that are completely unlinked and undiscoverable.
The Solution: We will create a new, dedicated "Do Nows" hub page and populate it by adding these resources to our database.
Artefact 2.1: Create the "Do Nows" Hub Page
Action: The Frontend Developer will create the new do-now.html page.
<!-- do-now.html -->
<main class="container">
   <h1>Mahi Whakarite (Do Nows)</h1>
   <p>Quick, 5-minute activities to start your lesson with focus and purpose.</p>
   <div id="do-now-grid" class="resource-grid">
       <!-- JavaScript will render the activity cards here -->
   </div>
</main>
<script src="/js/do-now-hub.js"></script>

Artefact 2.2: Database Population for "Do Nows" (SQL)
Action: The Full Stack Developer will execute the following SQL script.
-- This script adds our existing "Do Now" activities to the 'resources' table.
-- Ensure the 'do-now' type is part of your 'resource_type' ENUM.

INSERT INTO resources (type, title, description, path, tags, subject) VALUES
(
 'do-now', 
 'Panther Primary Source Analysis', 
 'A quick 5-min activity analyzing a historical document from the Polynesian Panthers.', 
 '/handouts/do-now-activities/panther-primary-source-do-now.html',
 ARRAY['social-sciences', 'history', 'primary-source'],
 'Social Sciences'
),
(
 'do-now', 
 'Political Cartoon Analysis', 
 'Deconstruct the meaning, techniques, and message of a political cartoon in minutes.', 
 '/handouts/do-now-activities/political-cartoon-analysis-do-now.html',
 ARRAY['social-sciences', 'media-literacy', 'visual-analysis'],
 'Social Sciences'
),
(
 'do-now', 
 'Whakataukī Wisdom', 
 'Interpret a Māori proverb and apply its wisdom to a modern context. A great values-based starter.', 
 '/handouts/do-now-activities/whakatauki-wisdom-do-now.html',
 ARRAY['te-ao-maori', 'literacy', 'values'],
 'Te Ao Māori'
);

Artefact 2.3: The Hub Page Logic
Action: The Frontend Developer will create the script to power the new hub page.
File: js/do-now-hub.js
document.addEventListener('DOMContentLoaded', async () => {
 const container = document.getElementById('do-now-grid');
 
 const { data: doNows, error } = await supabase
   .from('resources')
   .select('*')
   .eq('type', 'do-now');
 
 if (error) { /* Handle error */ return; }

 container.innerHTML = '';
 doNows.forEach(activity => {
   const card = document.createElement('div');
   card.className = 'card';
   card.innerHTML = `
     <h3>${activity.title}</h3>
     <p>${activity.description}</p>
     <a href="${activity.path}" class="card-link">View Activity</a>
   `;
   container.appendChild(card);
 });
});

Immediate Impact: A brand new, valuable section of the site is brought to life, unlocking ready-made lesson starters for teachers.
This sprint delivers immediate, visible progress and significantly enriches the content available on the live site, all while the deeper architectural work continues in parallel.
Te Kete Ako - Implementation Sprint 1: The Great Integration
Objective: To deliver immediate, tangible value to our users by integrating all orphaned content, while simultaneously beginning the foundational technical work of Project Whāriki.
Stream 1: The "Easy Wins" - Unlocking Orphaned Content
Lead: Full Stack Developer
Goal: To make every existing game and standalone lesson discoverable on the platform.
Artefact 1.1: Database Population for Games
Action: Run the following SQL script. This will add our existing, high-quality games to the central resources table, making them instantly visible on the games.html hub page.
-- This script populates the 'resources' table with our existing games.
-- Ensure the 'game' type has been added to the 'resource_type' ENUM first.

INSERT INTO resources (type, title, description, path, tags) VALUES
(
 'game', 
 'Pūnaha Tere (System Speed-sort)', 
 'A fast-paced digital game where players must correctly categorize concepts into Natural, Social, or Technical systems before time runs out.', 
 '/games/categories.html',
 ARRAY['systems-thinking', 'social-sciences', 'sorting']
),
(
 'game', 
 'Whiri Kupu (Word Weave)', 
 'A puzzle where you must "weave" scrambled syllables together to form a key Māori kupu. A great way to learn word structure.', 
 '/games/te-reo-wordle.html', -- Assuming this is the new home for the game logic
 ARRAY['te-reo-maori', 'literacy', 'vocabulary']
),
(
 'game', 
 'Countdown Letters', 
 'A classic word-finding game against the clock. How many words can you make from the nine letters?', 
 '/games/countdown-letters.html',
 ARRAY['english', 'literacy', 'vocabulary']
),
(
 'game', 
 'Spelling Bee', 
 'A fun and challenging spelling game to test your vocabulary and accuracy.', 
 '/games/spelling-bee.html',
 ARRAY['english', 'literacy', 'spelling']
);

Artefact 1.2: Database Population for Standalone Lessons
Action: Run the following SQL script. This will add our valuable standalone lessons to the resources table, making them discoverable on the lessons.html hub page.
-- This script populates the 'resources' table with our existing standalone lessons.

INSERT INTO resources (type, title, description, path, tags, subject, year_level) VALUES
(
 'lesson', 
 'Vowel Sounds Lesson', 
 'An interactive lesson focusing on the fundamental vowel sounds of Te Reo Māori.', 
 '/lessons/vowel-sounds-lesson.html',
 ARRAY['te-reo-maori', 'phonetics', 'literacy'],
 'Te Reo Māori',
 ARRAY[7, 8]
),
(
 'lesson', 
 'Brain Break: Word Search', 
 'A simple, fun word search activity perfect for a quick brain break or as a fast-finisher task.', 
 '/lessons/brain-break-wordsearch-lesson.html',
 ARRAY['brain-break', 'puzzle', 'literacy'],
 'English',
 ARRAY[7, 8, 9]
);

Stream 2: Project Whāriki - Laying the Foundation
Lead: Tech Lead & Database Specialist
Goal: To build and test the core infrastructure for our new content architecture.
Artefact 2.1: The Master content_nodes Table
Action: Run the following SQL migration. This is the single most important step of Project Whāriki. It creates our new, unified content library.
-- This migration creates our "single source of truth" for all future content.
CREATE TYPE resource_type_v2 AS ENUM ('unit', 'lesson', 'handout', 'game', 'workbook', 'slides', 'puzzle', 'do-now', 'assessment');

CREATE TABLE content_nodes (
   id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
   slug TEXT UNIQUE NOT NULL,
   type resource_type_v2 NOT NULL,
   title TEXT NOT NULL,
   description TEXT,
   body_json JSONB, -- Storing content as structured JSON for maximum flexibility
   subject TEXT,
   year_level INT[],
   tags TEXT[],
   parent_id BIGINT REFERENCES public.content_nodes(id),
   created_at TIMESTAMPTZ DEFAULT NOW(),
   updated_at TIMESTAMPTZ DEFAULT NOW()
);

ALTER TABLE content_nodes ENABLE ROW LEVEL SECURITY;
CREATE POLICY "Public can read content nodes" ON content_nodes FOR SELECT USING (true);

Artefact 2.2: The First Content Migration
Action: Use our automated migration script (scripts/migrate-content.js) to perform the first migration. We will start with the "Writer's Toolkit" as our test case.
Configuration for scripts/migrate-content.js:
// CONFIGURE THIS SCRIPT for the first run
const SUPABASE_URL = 'YOUR_SUPABASE_URL';
const SUPABASE_SERVICE_KEY = 'YOUR_SUPABASE_SERVICE_KEY';
const FOLDER_TO_MIGRATE = path.join(__dirname, '../handouts/writers-toolkit'); // Assuming they are in a subfolder
const CONTENT_TYPE = 'handout';
// ...

Execution Command:
node scripts/migrate-content.js

Verification: After the script runs, the Database Specialist will verify that the "Writer's Toolkit" handouts now exist as entries in the content_nodes table.
Sprint Outcome
By the end of this sprint:
* Our users will immediately see more games and lessons on the live site, increasing the platform's value.
* We will have successfully built and tested the foundational table and the automated script for our new content architecture.
This sets the stage perfectly for the next sprint, where we will build the dynamic rendering engine and begin migrating content at scale. The mahi is underway.
Project Ākonga & Māramatanga - Implementation Playbook
Objective: To provide a complete, sprint-ready implementation plan for building the student assignment workflow (Project Ākonga) and the platform intelligence layer (Project Māramatanga).
Part 1: Project Ākonga (The Student Workflow)
This project will be built across three logical sprints, ensuring a stable and tested rollout of functionality.
Sprint 1: The Teacher's Assignment Creation Workflow
Goal: To empower teachers to create and share a resource as a formal assignment.
Artefact 1.1: Database Schema Upgrade (SQL)
Action: Create a migration to add the necessary tables and columns to support assignments.
-- Add new columns to our existing shared_links table to turn them into "assignments"
ALTER TABLE shared_links
ADD COLUMN instructions TEXT,
ADD COLUMN submission_type TEXT DEFAULT 'none'; -- e.g., 'none', 'text_response', 'mark_as_done'

-- Create a new table to store student submissions
CREATE TABLE student_submissions (
 id BIGINT PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
 shared_link_id BIGINT NOT NULL REFERENCES public.shared_links(id) ON DELETE CASCADE,
 student_name TEXT NOT NULL, -- Students will enter their name for now
 response_text TEXT, -- For text-based submissions
 is_complete BOOLEAN DEFAULT FALSE, -- For "Mark as Done" submissions
 submitted_at TIMESTAMPTZ DEFAULT NOW()
);

-- Enable RLS for the new table
ALTER TABLE student_submissions ENABLE ROW LEVEL SECURITY;

-- Policy: A teacher can see the submissions for assignments they created.
CREATE POLICY "Teachers can view submissions for their own assignments"
ON student_submissions
FOR SELECT
USING (
 EXISTS (
   SELECT 1 FROM shared_links
   WHERE shared_links.id = student_submissions.shared_link_id
   AND shared_links.user_id = auth.uid()
 )
);

Artefact 1.2: The "Create Assignment" UI & Logic
Action: Create the modal and the JavaScript to power it.
HTML Snippet (for the modal):
<div id="assignment-modal" class="modal-container hidden">
 <div class="modal-content">
   <h3>Create a New Assignment</h3>
   <p>This will create a shareable link for your students. You can add instructions and see their responses on your dashboard.</p>
   <label for="assignment-instructions">Your Instructions (Optional):</label>
   <textarea id="assignment-instructions" placeholder="e.g., 'Read the handout and identify the three main arguments...'"></textarea>
   <label for="submission-type">Submission Type:</label>
   <select id="submission-type">
       <option value="none">No submission required</option>
       <option value="text_response">A short text response</option>
       <option value="mark_as_done">A "Mark as Complete" button</option>
   </select>
   <button id="create-assignment-btn" class="btn-primary">Create Assignment Link</button>
 </div>
</div>

JavaScript Snippet (js/assignment-creator.js):
// This script would be loaded on pages with a "Create Assignment" button
const createAssignmentBtn = document.getElementById('create-assignment-btn');
createAssignmentBtn.addEventListener('click', async () => {
   const resourceId = 123; // Get this from the page context
   const instructions = document.getElementById('assignment-instructions').value;
   const submissionType = document.getElementById('submission-type').value;

   // Call a new, secure Edge Function to create the assignment
   const { data, error } = await supabase.functions.invoke('create-assignment', {
       body: {
           resource_id: resourceId,
           instructions: instructions,
           submission_type: submissionType
       }
   });

   if (error) { /* Show error toast */ }
   else {
       // Show the share modal with the new link and code from the response
       showShareModal(data.share_code);
   }
});

Sprint 2: The Student Experience
Goal: To build the page where students view and complete their assignments.
Artefact 2.1: The Dynamic Student Assignment Page
Action: Build the logic for the /s/[share_code] page.
JavaScript Snippet (js/student-assignment-view.js):
document.addEventListener('DOMContentLoaded', async () => {
   const shareCode = window.location.pathname.split('/').pop();
   
   // Fetch the assignment details using the share code
   const { data: assignment, error } = await supabase
       .from('shared_links')
       .select(`
           instructions,
           submission_type,
           resources (*)
       `)
       .eq('share_code', shareCode)
       .single();

   if (error) { /* Show "Assignment not found" message */ return; }

   // Render the teacher's instructions
   document.getElementById('teacher-instructions').textContent = assignment.instructions;
   
   // Render the resource (e.g., embed the game or handout in an iframe)
   document.getElementById('resource-iframe').src = assignment.resources.path;

   // Render the correct submission form based on submission_type
   setupSubmissionForm(assignment.submission_type, assignment.id);
});

Sprint 3: The Teacher Dashboard & Feedback Loop
Goal: To close the loop by allowing teachers to track progress and view submissions.
Artefact 3.1: The Teacher Dashboard UI & Logic
Action: Build the teacher-dashboard.html page and its corresponding script.
HTML Snippet (teacher-dashboard.html):
<main class="container">
   <h1>My Classroom Dashboard</h1>
   <section class="assignments-list">
       <h2>Active Assignments</h2>
       <table>
           <thead>
               <tr>
                   <th>Resource</th>
                   <th>Share Code</th>
                   <th>Submissions</th>
                   <th>Actions</th>
               </tr>
           </thead>
           <tbody id="assignments-table-body">
               <!-- JS will render rows here -->
           </tbody>
       </table>
   </section>
</main>

JavaScript Snippet (js/teacher-dashboard.js):
document.addEventListener('DOMContentLoaded', async () => {
   // Fetch all assignments created by the current teacher
   const { data: assignments, error } = await supabase
       .from('shared_links')
       .select(`
           share_code,
           resources (title),
           student_submissions (count)
       `)
       .eq('user_id', supabase.auth.user().id);

   // Render the table rows with the assignment data
   const tableBody = document.getElementById('assignments-table-body');
   assignments.forEach(assignment => {
       const row = document.createElement('tr');
       row.innerHTML = `
           <td>${assignment.resources.title}</td>
           <td>${assignment.share_code}</td>
           <td>${assignment.student_submissions[0].count}</td>
           <td><a href="/submissions/${assignment.share_code}">View Submissions</a></td>
       `;
       tableBody.appendChild(row);
   });
});

This structured, three-sprint approach allows us to build out the complex Project Ākonga feature set in a logical, testable, and manageable way.
Te Kete Ako - The Mangakotukutuku College Content Strategy
Authored by: The Principal
Date: 26 July 2025
Vision: To build the deepest, most engaging, and most supportive digital curriculum in Aotearoa, moving from individual exemplary units to a comprehensive, gold-standard resource for all core subjects.
1. Our Guiding Philosophy: "Te Hōhonutanga" (The Depth)
Inspired by our recent discussions and the principles of building domain-specific intelligence, our core philosophy is Depth over Breadth. We will not create a shallow overview of a hundred topics. Instead, we will build rich, interconnected, and deeply scaffolded "knowledge pathways" for our core units.
* From Content Library to Knowledge Graph: We will treat each unit not as a collection of files, but as a knowledge graph. Every lesson, handout, game, and assessment is a "node," and our job is to build the explicit, logical connections between them.
* Verifiable Learning: Every activity will be designed to build upon the last, creating a verifiable pathway to mastery. We will avoid "shallow" tasks in favour of activities that require deep, critical thinking.
* Quality over Quantity: It is better to have one "gold standard" unit like our Year 8 Systems inquiry, which can be taught with confidence by any kaiako, than ten thin, unsupported unit outlines.
2. The Team Structure: "Te Whānau Pūkenga" (The Family of Experts)
To achieve this depth at scale, we must formalize our team structure. Effective immediately, we are establishing the following roles for our Kaiako Task Force. This is our hiring plan and our organizational chart.
* Learning Area Leaders (LALs) - The "Kaitiaki" of the Curriculum:
   * Roles: Head of English, Head of Social Sciences, Head of STEM, Head of The Arts, Head of Health & PE, Head of Te Reo Māori.
   * Responsibilities: They are the ultimate owners of their curriculum area. They will approve all new unit plans, ensure alignment with the NZ Curriculum, and provide final sign-off on content before it goes to the Tech Lead for implementation. They are senior staff who manage and mentor their subject specialists.
* Learning Facilitators (LFs) - The "Pou Tautoko" for our Ākonga:
   * Roles: Head of Junior School (Years 7-8), Head of Middle School (Years 9-10), Head of Senior School (Years 11-13).
   * Responsibilities: They are the experts on the specific developmental needs of their year levels. They will review all units to ensure the content is age-appropriate and engaging. They are the voice of the student in our planning.
* The Specialist Kaiako - The "Ringa Raupā" (The Workers):
   * Subject Specialists: Our primary content creators. They will be assigned to a Learning Area (e.g., a Year 9 English teacher) and will be responsible for the initial drafting of lesson plans, resources, and assessments under the guidance of their LAL.
   * Differentiation & Neurodiversity Kaiako: A dedicated team who work across all learning areas. Their job is to take a completed draft unit and enrich it with the scaffolds, tiered activities, and support materials necessary to ensure it is accessible to all learners.
   * Gamification & Engagement Kaiako: A specialist team who will collaborate with the game designers. They will review draft units and identify opportunities to build or integrate interactive games and puzzles that directly support the learning objectives.
* The UI/UX Designer: Works alongside all teams to ensure every new resource, from a printable worksheet to a digital game, adheres to the professional branding and visual identity of Te Kete Ako.
3. The Workflow: From Idea to Gold Standard
This is our new, non-negotiable content creation pipeline. No resource will be published until it has passed through every stage.
1. Stage 1: Unit Proposal (The LAL): The Learning Area Leader identifies the need for a new unit (e.g., "The Witches") and creates the high-level unit plan, defining the core learning objectives and assessment.
2. Stage 2: Core Content Creation (The Subject Specialist): The assigned Subject Specialist Kaiako writes the first draft of all lesson plans and core resources.
3. Stage 3: Peer Review & LAL Approval: The draft is reviewed by another subject specialist and then approved by the LAL for pedagogical soundness and curriculum alignment.
4. Stage 4: LF Review (The Year Level Check): The approved draft is passed to the relevant Learning Facilitator, who reviews it for age-appropriateness and student engagement.
5. Stage 5: Enrichment (The Specialist Pass):
   * It goes to the Differentiation Kaiako to add scaffolds, tiered activities, and support materials.
   * It goes to the Gamification Kaiako to design and integrate interactive learning games.
6. Stage 6: Cultural Competency Review: A final review is conducted by our Kaitohu Māori to ensure all content is culturally responsive and authentic.
7. Stage 7: Final Sign-off & Implementation: The fully enriched, "gold standard" unit is given final approval by the LAL and the Principal. It is then handed to the Tech Lead and UI/UX Designer to be built and integrated into the live platform.
This is our commitment to quality. This is our promise to our ākonga. This is how we will scale our excellence. The work continues.
Artefact Suite: "Te Pukapuka a te Kaiwhakahaere" (The Director's Workbooklet)
Status: PRODUCTION READY
Project: "The Witches: Deconstructing Dahl" Unit
Creator: Te Kete Ako Kaiako Task Force & Development Team
This document contains the final, production-ready code and content for the core student-facing resource of our new English unit.
1. The Master Resource: The Workbooklet PDF
This is the central, tangible artefact for the ākonga. It is a comprehensive, multi-page A4 document that guides them through the entire unit. The following sections represent the key pages within this workbooklet.
(Note: This would be compiled into a single, beautifully designed PDF by the Kaitoi Matihiko before being uploaded to the platform.)
2. Page 2: The Witch-Spotter's Field Guide
Purpose: To scaffold the initial close-reading and evidence-gathering task from Phase 1.
<!-- This is the HTML structure that will be used to generate the PDF page -->
<div class="workbook-page">
   <header class="page-header">
       <h2>Wāhanga 1: The Witch-Spotter's Field Guide</h2>
   </header>
   <section class="mission-brief">
       <p><strong>Agent Name:</strong> _________________________</p>
       <p><strong>Mission:</strong> To identify the key characteristics of a REAL WITCH as described by our informant. For each trait, you must provide direct evidence from the text (a quote) and a quick field sketch.</p>
   </section>
   <table class="field-guide-table">
       <thead>
           <tr>
               <th>Trait</th>
               <th>Textual Evidence (Quote from the Novel)</th>
               <th>Field Sketch</th>
           </tr>
       </thead>
       <tbody>
           <tr>
               <td><strong>1. The Gloves</strong></td>
               <td class="evidence-cell">"________________________"</td>
               <td class="sketch-cell"></td>
           </tr>
           <tr>
               <td><strong>2. The Wig</strong></td>
               <td class="evidence-cell">"________________________"</td>
               <td class="sketch-cell"></td>
           </tr>
           <tr>
               <td><strong>3. The Nostrils</strong></td>
               <td class="evidence-cell">"________________________"</td>
               <td class="sketch-cell"></td>
           </tr>
           <tr>
               <td><strong>4. The Eyes</strong></td>
               <td class="evidence-cell">"________________________"</td>
               <td class="sketch-cell"></td>
           </tr>
           <tr>
               <td><strong>5. The Feet</strong></td>
               <td class="evidence-cell">"________________________"</td>
               <td class="sketch-cell"></td>
           </tr>
       </tbody>
   </table>
   <section class="final-analysis">
       <h3>Top Secret Field Analysis:</h3>
       <p>Based on your evidence, do you think our informant (the narrator) is a reliable source? Why or why not?</p>
       <textarea class="response-area"></textarea>
   </section>
</div>

3. Page 4: The Suspense-o-Meter
Purpose: The core analytical tool for Phase 2, turning plot analysis into a visual, data-driven task.
<!-- This is the HTML structure that will be used to generate the PDF page -->
<div class="workbook-page">
   <header class="page-header">
       <h2>Wāhanga 2: The Suspense-o-Meter</h2>
   </header>
   <section class="mission-brief">
       <p><strong>Mission:</strong> To track the rising tension during the RSPCC meeting. For each key event, plot a point on the graph to show how much suspense you felt. Then, justify your rating with a quote from the book.</p>
   </section>
   <div class="suspense-graph-container">
       <!-- A background image of the graph would be placed here -->
   </div>
   <table class="suspense-justification-table">
       <thead>
           <tr>
               <th>Key Event</th>
               <th>My Tension Rating (1-10)</th>
               <th>Justification (Quote from the book)</th>
           </tr>
       </thead>
       <tbody>
           <tr>
               <td><strong>A. The doors are locked.</strong></td>
               <td class="rating-cell"></td>
               <td class="evidence-cell">"________________________"</td>
           </tr>
           <tr>
               <td><strong>B. The Grand High Witch takes off her mask.</strong></td>
               <td class="rating-cell"></td>
               <td class="evidence-cell">"________________________"</td>
           </tr>
           <tr>
               <td><strong>C. Bruno Jenkins is turned into a mouse.</strong></td>
               <td class="rating-cell"></td>
               <td class="evidence-cell">"________________________"</td>
           </tr>
       </tbody>
   </table>
   <section class="final-analysis">
       <h3>Critical Analysis (Dramatic Irony):</h3>
       <p>What is the one crucial secret that *we* (the readers) know, but the witches on stage do not? How does this secret make the entire scene even more tense?</p>
       <textarea class="response-area"></textarea>
   </section>
</div>

4. Page 10-11: The Director's Pitch Planner
Purpose: The central planning tool for the final capstone assessment in Phase 4.
<!-- This is the HTML structure for the two-page planner spread in the PDF -->
<div class="workbook-page-spread">
   <header class="page-header">
       <h2>Wāhanga 4: The Director's Pitch Planner</h2>
   </header>
   <section class="mission-brief">
       <p><strong>Mission:</strong> To plan the three key decisions for your 2025 film adaptation of "The Witches."</p>
   </section>
   
   <div class="planner-grid">
       <!-- Decision 1 -->
       <div class="planner-box">
           <h3>Decision 1: The Casting Choice</h3>
           <p><strong>Who will you cast as your Grand High Witch?</strong></p>
           <input type="text" placeholder="Name of a current actor...">
           <p><strong>Justification:</strong> Why is this actor perfect for your vision of the character?</p>
           <textarea class="response-area"></textarea>
       </div>

       <!-- Decision 2 -->
       <div class="planner-box">
           <h3>Decision 2: The Transformation Scene</h3>
           <p><strong>How will you film the transformation?</strong> (Practical Effects, CGI, or Hybrid)</p>
           <input type="text" placeholder="Your technical approach...">
           <p><strong>Justification:</strong> How will this choice create a unique mood and scare a modern audience?</p>
           <textarea class="response-area"></textarea>
       </div>

       <!-- Decision 3 -->
       <div class="planner-box">
           <h3>Decision 3: The Ending</h3>
           <p><strong>Which ending will you use?</strong> (Book, 1990 Film, or your own)</p>
           <input type="text" placeholder="Describe your chosen ending...">
           <p><strong>Justification:</strong> Why is this the most powerful and satisfying ending for your story?</p>
           <textarea class="response-area"></textarea>
       </div>
   </div>
</div>

5. Database Integration
Purpose: To formally add the completed workbooklet to our central content library.
-- This SQL statement makes the new workbooklet discoverable on the platform.
INSERT INTO public.content_nodes (slug, type, title, description, subject, year_level, tags, parent_id, body)
VALUES (
 'witches-unit-student-workbooklet',
 'workbook',
 'The Director''s Workbooklet: A Witches Unit Journal',
 'The complete, printable workbooklet to guide ākonga through the entire ''The Witches'' unit, from initial analysis to final creative assessment.',
 'English',
 ARRAY[8, 9],
 ARRAY['assessment', 'workbook', 'roald-dahl', 'film-study'],
 101, -- The ID of the parent "Witches Unit"
 '{"file_path": "/resources/workbooks/witches-unit-workbooklet.pdf"}'::jsonb
);

Te Kete Ako - Strategic Review & Go-Forward Plan
Authored By: The Principal, Mangakotukutuku College
Date: 26 July 2025
Purpose: To synthesize our recent development and planning, celebrate our progress, and define a clear, prioritized roadmap for all future work on the Te Kete Ako platform.
1. What Is Complete & Can Be Archived
Our initial sprints were focused on stabilization and establishing a "gold standard" for content. The following foundational work is now complete and integrated into our daily workflow. You can consider these major initiatives DONE:
* ✅ Critical Site Stabilization: All show-stopping bugs identified in our initial audits have been resolved. The platform is stable, fast, and professional.
* ✅ The "Gold Standard" Content Model: We have successfully designed and implemented a world-class model for creating deeply enriched, cross-curricular, and differentiated units (as exemplified by the "Y8 Systems" and "The Witches" units).
* ✅ The Kaiako Task Force & Workflow: Our team structure of LALs, LFs, and specialist kaiako is in place. The multi-stage content creation and enrichment pipeline is our new standard operating procedure.
* ✅ Core User Utilities: The essential utilities that build user trust are now live and functional, including the support ticket system, password reset flow, and print-friendly stylesheets.
* ✅ Foundational UI/UX Polish: The streamlined header, enhanced footer, and core animation system (Project Kōwhaiwhai) are implemented, providing a consistent and delightful user experience on all new content.
2. The Critical Path: What Still Needs To Be Built
These are the major, interconnected architectural projects we have designed. They are the highest priority for our technical team as they unlock the full potential of the platform.
1. Project Whāriki (The Great Re-architecture): This remains our number one technical priority. It is the deep, structural change that will solve a dozen other problems at once.
   * Task: Systematically migrate all legacy content from static HTML files into our unified content_nodes database.
   * Task: Implement the Dynamic Routing system and universal templates (lesson-template.html, etc.) to render all content consistently.
   * Task: Build the Kaiako Content Hub (admin panel) so our team can manage the new content library without developer intervention.
2. Project Ākonga (The Complete Student Workflow): We have designed a powerful assignment and tracking system, but it is not yet built.
   * Task: Build the "Create Assignment" workflow for teachers, allowing them to add instructions and set submission types.
   * Task: Build the "Teacher Dashboard" for tracking assignments and viewing student submissions.
   * Task: Build the full student submission page and the simplified "Student Dashboard" view.
3. Project Māramatanga (Intelligence & Communication): This is the final layer that makes our platform proactive and social.
   * Task: Implement the automated Notification System (the "bell" icon and database triggers).
   * Task: Build the teacher-only Collaboration Forum on resource pages.
   * Task: Implement the full, role-aware Recommendation Engine for both teachers and students.
3. The Next Horizon: What Else Should Be Done?
Once the Critical Path is complete, these are the next major strategic initiatives we should pursue to continue our growth.
* A Professional Analytics Dashboard: We have designed the data pipeline (user_events), but we need to build a dedicated, private dashboard for our Kāhui Arataki. This will have data visualizations showing which resources are most popular, where users are dropping off, and how our games are being used, allowing us to make data-driven decisions about future content priorities.
* Gamification 2.0: We have individual games, but we need a site-wide gamification system. This would include points for completing lessons, badges for mastering a unit, and a classroom leaderboard to foster friendly competition and engagement.
* The "Trusted Tool" Polish: We must not forget about the final layer of professionalization we planned. This includes turning the site into an offline-capable Progressive Web App (PWA) and building the "First Time User" onboarding tour and data management tools.
4. The Orchard: Easy Wins We Can Pick Right Now
You are absolutely right. We have a massive amount of untapped potential in our existing games and activities. While the senior developers focus on the heavy architecture of Project Whāriki, we can run a parallel "Resource Integration Sprint" to unlock immediate value.
This is the perfect work for other team members and will have a huge impact on team morale and site vibrancy.
The Plan: A Two-Step Process for Every Orphaned Resource
For each of the dozens of unlinked games, handouts, and activities, a developer will:
1. Create a Database Entry: Add a new row to our resources table for the item. This involves writing a simple SQL INSERT statement with its title, description, path, and type (e.g., game, handout).
2. Link it to a Hub: Ensure the new resource automatically appears on its relevant "hub" page (games.html, handouts.html, do-now.html, etc.). Our new dynamic hub pages make this part easy.
Specific Easy Wins Ready for Integration:
* Games: countdown-letters.html, english-wordle.html, spelling-bee.html can all be added to the games.html hub immediately.
* The Writer's Toolkit: The 15+ handouts like writers-toolkit-analogy-handout.html and writers-toolkit-hook-handout.html can be added to the (soon-to-be-overhauled) toolkit.html hub.
* Standalone Lessons: Files like vowel-sounds-lesson.html and brain-break-wordsearch-lesson.html can be given their own entries and linked from a new "Standalone Lessons" section on the lessons.html hub.
This parallel approach is the most efficient path forward. It allows us to make immediate, visible progress that our users will love, while simultaneously tackling the deep, foundational work that will secure the future of Te Kete Ako.