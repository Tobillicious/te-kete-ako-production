<!DOCTYPE html>
<html lang="mi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üî¢ MƒÅori Numeracy Adventures | Te Kete Ako</title>
    <meta name="description" content="Count objects using traditional MƒÅori counting methods and learn number names in Te Reo MƒÅori">
<!-- Professional Design System -->
<link rel="stylesheet" href="/css/te-kete-professional.css">
    
    <!-- üé® ULTIMATE BEAUTY SYSTEM - Te Kete Ako Design Excellence -->
 <link rel="stylesheet" href="/css/te-kete-ultimate-beauty-system.css">
 <script src="https://cdn.tailwindcss.com"></script>
 <script src="/tailwind.config.ultimate.js"></script>
 <!-- END ULTIMATE BEAUTY SYSTEM -->
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Comic+Neue:wght@400;700&family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Comic Neue', cursive;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 50%, #f093fb 100%);
            min-height: 100vh;
            color: #333;
            line-height: 1.6;
            letter-spacing: 0.02em;
        }

        .game-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            position: relative;
            z-index: 10;
        }

        /* ADAPTIVE HEADER */
        .game-header {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            border-radius: 25px;
            padding: 30px;
            margin-bottom: 30px;
            text-align: center;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            position: relative;
            overflow: hidden;
        }

        .game-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 5px;
            background: linear-gradient(90deg, #4caf50, #2196f3, #ff6b35, #9c27b0);
        }

        .main-title {
            font-size: 3rem;
            font-weight: 700;
            background: linear-gradient(135deg, #2196f3, #4caf50);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            margin-bottom: 15px;
        }

        .cultural-intro {
            background: rgba(76, 175, 80, 0.1);
            border: 2px solid #4caf50;
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
            font-size: 1.1rem;
            color: #2e7d32;
        }

        /* GAME SELECTION GRID */
        .games-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 25px;
            margin-bottom: 40px;
        }

        .game-card {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            overflow: hidden;
            min-height: 250px;
        }

        .game-card:hover {
            transform: translateY(-8px);
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
        }

        .game-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
        }

        .game-counting::before { background: linear-gradient(90deg, #4caf50, #66bb6a); }
        .game-patterns::before { background: linear-gradient(90deg, #2196f3, #42a5f5); }
        .game-operations::before { background: linear-gradient(90deg, #ff6b35, #ff8a65); }
        .game-shapes::before { background: linear-gradient(90deg, #9c27b0, #ba68c8); }

        .game-icon {
            font-size: 4rem;
            margin-bottom: 20px;
            display: block;
            text-align: center;
        }

        .game-title {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 10px;
            text-align: center;
            color: #333;
        }

        .game-description {
            font-size: 1rem;
            color: #666;
            margin-bottom: 20px;
            text-align: center;
        }

        .difficulty-level {
            display: flex;
            justify-content: center;
            gap: 5px;
            margin-bottom: 15px;
        }

        .difficulty-dot {
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #e0e0e0;
        }

        .difficulty-dot.active { background: #4caf50; }

        .cultural-connection {
            background: rgba(255, 111, 53, 0.1);
            border-radius: 10px;
            padding: 10px;
            font-size: 0.9rem;
            color: #f57c00;
            text-align: center;
            font-style: italic;
        }

        /* GAME INTERFACE */
        .game-interface {
            display: none;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(15px);
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
            position: relative;
        }

        .game-interface.active {
            display: block;
        }

        .game-nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #e0e0e0;
        }

        .back-button {
            background: #ff6b35;
            color: white;
            border: none;
            border-radius: 15px;
            padding: 12px 24px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .back-button:hover {
            background: #f57c00;
            transform: translateY(-2px);
        }

        .game-progress {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .progress-bar {
            width: 200px;
            height: 15px;
            background: #e0e0e0;
            border-radius: 10px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4caf50, #66bb6a);
            border-radius: 10px;
            transition: width 0.5s ease;
        }

        .score-display {
            font-size: 1.2rem;
            font-weight: 700;
            color: #2196f3;
        }

        /* COUNTING GAME STYLES */
        .counting-objects {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
            gap: 15px;
            margin: 30px 0;
            justify-items: center;
        }

        .counting-object {
            font-size: 3rem;
            cursor: pointer;
            transition: all 0.3s ease;
            padding: 10px;
            border-radius: 15px;
            user-select: none;
        }

        .counting-object:hover {
            transform: scale(1.1);
            background: rgba(76, 175, 80, 0.2);
        }

        .counting-object.selected {
            background: rgba(76, 175, 80, 0.3);
            transform: scale(1.2);
        }

        .counting-object.correct {
            background: rgba(76, 175, 80, 0.5);
            animation: bounce 0.5s ease;
        }

        @keyframes bounce {
            0%, 100% { transform: scale(1.2); }
            50% { transform: scale(1.5); }
        }

        /* ANSWER OPTIONS */
        .answer-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
            gap: 15px;
            margin: 30px 0;
        }

        .answer-button {
            background: linear-gradient(135deg, #2196f3, #42a5f5);
            color: white;
            border: none;
            border-radius: 15px;
            padding: 20px;
            font-size: 2rem;
            font-weight: 700;
            cursor: pointer;
            transition: all 0.3s ease;
            min-height: 80px;
        }

        .answer-button:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(33, 150, 243, 0.3);
        }

        .answer-button.correct {
            background: linear-gradient(135deg, #4caf50, #66bb6a);
            animation: pulse 0.5s ease;
        }

        .answer-button.incorrect {
            background: linear-gradient(135deg, #f44336, #ef5350);
            animation: shake 0.5s ease;
        }

        @keyframes pulse {
            0%, 100% { transform: scale(1); }
            50% { transform: scale(1.05); }
        }

        @keyframes shake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        /* GAME QUESTION */
        .game-question {
            background: rgba(102, 126, 234, 0.1);
            border: 2px solid rgba(102, 126, 234, 0.3);
            border-radius: 15px;
            padding: 25px;
            margin-bottom: 30px;
            text-align: center;
        }

        .question-text {
            font-size: 1.8rem;
            font-weight: 700;
            color: #333;
            margin-bottom: 15px;
        }

        .cultural-context {
            font-size: 1rem;
            color: #666;
            font-style: italic;
        }

        /* FEEDBACK SYSTEM */
        .feedback-message {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            border-radius: 20px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
            text-align: center;
            z-index: 1000;
            display: none;
            max-width: 400px;
        }

        .feedback-message.show {
            display: block;
            animation: feedbackShow 0.5s ease;
        }

        @keyframes feedbackShow {
            0% { opacity: 0; transform: translate(-50%, -50%) scale(0.8); }
            100% { opacity: 1; transform: translate(-50%, -50%) scale(1); }
        }

        .feedback-icon {
            font-size: 4rem;
            margin-bottom: 15px;
        }

        .feedback-text {
            font-size: 1.3rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .feedback-explanation {
            font-size: 1rem;
            color: #666;
            margin-bottom: 20px;
        }

        .continue-button {
            background: linear-gradient(135deg, #4caf50, #66bb6a);
            color: white;
            border: none;
            border-radius: 15px;
            padding: 15px 30px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .continue-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 20px rgba(76, 175, 80, 0.3);
        }

        /* MAORI COUNTING DISPLAY */
        .maori-numbers {
            background: rgba(255, 111, 53, 0.1);
            border: 2px solid #ff6b35;
            border-radius: 15px;
            padding: 20px;
            margin: 20px 0;
            text-align: center;
        }

        .maori-number {
            font-size: 1.5rem;
            font-weight: 700;
            color: #f57c00;
            margin-bottom: 10px;
        }

        .pronunciation-guide {
            font-size: 0.9rem;
            color: #666;
            font-style: italic;
        }

        /* SHAPE PATTERN GAME */
        .pattern-sequence {
            display: flex;
            justify-content: center;
            gap: 15px;
            margin: 30px 0;
            flex-wrap: wrap;
        }

        .pattern-shape {
            width: 80px;
            height: 80px;
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2rem;
            cursor: pointer;
            transition: all 0.3s ease;
            border: 3px solid transparent;
        }

        .pattern-shape.triangle {
            background: linear-gradient(135deg, #4caf50, #66bb6a);
            clip-path: polygon(50% 0%, 0% 100%, 100% 100%);
        }

        .pattern-shape.circle {
            background: linear-gradient(135deg, #2196f3, #42a5f5);
            border-radius: 50%;
        }

        .pattern-shape.square {
            background: linear-gradient(135deg, #ff6b35, #ff8a65);
        }

        .pattern-shape.diamond {
            background: linear-gradient(135deg, #9c27b0, #ba68c8);
            transform: rotate(45deg);
        }

        .pattern-shape:hover {
            transform: scale(1.1);
            border-color: #333;
        }

        .pattern-shape.selected {
            border-color: #4caf50;
            border-width: 4px;
        }

        /* RESPONSIVE DESIGN */
        @media (max-width: 768px) {
            .main-title {
                font-size: 2rem;
            }
            
            .games-grid {
                grid-template-columns: 1fr;
                gap: 20px;
            }
            
            .game-nav {
                flex-direction: column;
                gap: 15px;
                align-items: stretch;
            }
            
            .progress-bar {
                width: 100%;
            }
            
            .counting-objects {
                grid-template-columns: repeat(auto-fit, minmax(60px, 1fr));
            }
            
            .answer-options {
                grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
            }
            
            .pattern-sequence {
                gap: 10px;
            }
            
            .pattern-shape {
                width: 60px;
                height: 60px;
            }
        }

        /* ACCESSIBILITY ENHANCEMENTS */
        .large-touch-target {
            min-height: 44px;
            min-width: 44px;
        }

        button:focus, .counting-object:focus, .pattern-shape:focus {
            outline: 3px solid #ff6b35;
            outline-offset: 2px;
        }

        .sr-only {
            position: absolute;
            left: -10000px;
            width: 1px;
            height: 1px;
            overflow: hidden;
        }
    </style>
</head>
<body data-auto-init="true" data-current-page="games" class="pattern-koru-subtle">
    <!-- Professional Navigation -->
    <div id="beautiful-nav-container"></div>
    <script>
        fetch('/components/navigation-standard.html')
            .then(r => r.text())
            .then(html => {
                const div = document.createElement('div');
                div.innerHTML = html;
                document.body.insertBefore(div.firstElementChild, document.body.firstChild);
            });
    </script>

    <div class="game-container">
        <!-- GAME HEADER -->
        <header class="site-header no-print">
        <div class="nav-container">
            <a href="../index.html" class="nav-brand">Te Kete Ako</a>
            <nav class="main-nav">
                <ul>
                    <li>
                        <a href="../unit-plans.html">
                            <span class="nav-icon">üìö</span>
                            <span class="nav-text-en">Unit Plans</span>
                            <span class="nav-text-mi" lang="mi">NgƒÅ Waehere</span>
                        </a>
                    </li>
                    <li>
                        <a href="../teachers/index.html">
                            <span class="nav-icon">üßë‚Äçüè´</span>
                            <span class="nav-text-en">Teachers</span>
                            <span class="nav-text-mi" lang="mi">NgƒÅ Kaiako</span>
                        </a>
                    </li>
                    <li>
                        <a href="../lessons.html">
                            <span class="nav-icon">üéì</span>
                            <span class="nav-text-en">Lessons</span>
                            <span class="nav-text-mi" lang="mi">NgƒÅ Akoranga</span>
                        </a>
                    </li>
                    <li>
                        <a href="../handouts.html">
                            <span class="nav-icon">üìÑ</span>
                            <span class="nav-text-en">Handouts</span>
                            <span class="nav-text-mi" lang="mi">NgƒÅ Rauemi</span>
                        </a>
                    </li>
                    <li>
                        <a href="../games.html">
                            <span class="nav-icon">üéÆ</span>
                            <span class="nav-text-en">Games</span>
                            <span class="nav-text-mi" lang="mi">NgƒÅ Kƒìmu</span>  
                        </a>
                    </li>
                    <li class="auth-nav my-kete-link" style="display: none;">
                        <a href="../my-kete.html">
                            <span class="nav-icon">üß∫</span>
                            My Kete
                        </a>
                    </li>
                    <li class="auth-nav">
                        <a href="../login.html" class="login-btn">
                            <span class="nav-icon">üë§</span>
                            Login
                        </a>
                    </li>
                    <li class="auth-nav" style="display: none;">
                        <a href="../register-simple.html" class="register-btn">
                            <span class="nav-icon">üìù</span>
                            Register
                        </a>
                    </li>
                </ul>
            </nav>
            <nav class="breadcrumbs no-print" aria-label="Breadcrumb">
                <ol id="breadcrumbs" class="breadcrumbs-list"></ol>
            </nav>
        </div>
    </header>

        <!-- GAME SELECTION GRID -->
        <section class="games-grid" id="games-selection">
            <!-- COUNTING GAME -->
            <div class="game-card game-counting" onclick="startGame('counting')" tabindex="0">
                <span class="game-icon">ü¶Ñ</span>
                <h2 class="game-title">Counting Adventures</h2>
                <p class="game-description">Count objects using traditional MƒÅori counting methods and learn number names in Te Reo MƒÅori</p>
                
                <div class="difficulty-level">
                    <span class="difficulty-dot active"></span>
                    <span class="difficulty-dot active"></span>
                    <span class="difficulty-dot"></span>
                    <span class="difficulty-dot"></span>
                    <span class="difficulty-dot"></span>
                </div>
                
                <div class="cultural-connection">
                    üåø Learn traditional MƒÅori base-5 counting system
                </div>
            </div>

            <!-- PATTERN RECOGNITION -->
            <div class="game-card game-patterns" onclick="startGame('patterns')" tabindex="0">
                <span class="game-icon">üé®</span>
                <h2 class="game-title">Cultural Patterns</h2>
                <p class="game-description">Discover mathematical patterns in traditional MƒÅori art, weaving, and carvings</p>
                
                <div class="difficulty-level">
                    <span class="difficulty-dot active"></span>
                    <span class="difficulty-dot active"></span>
                    <span class="difficulty-dot active"></span>
                    <span class="difficulty-dot"></span>
                    <span class="difficulty-dot"></span>
                </div>
                
                <div class="cultural-connection">
                    üåø Explore geometry in koru, taniko, and tukutuku patterns
                </div>
            </div>

            <!-- BASIC OPERATIONS -->
            <div class="game-card game-operations" onclick="startGame('operations')" tabindex="0">
                <span class="game-icon">‚ûï</span>
                <h2 class="game-title">WhƒÅnau Math</h2>
                <p class="game-description">Practice addition and subtraction through family and community stories</p>
                
                <div class="difficulty-level">
                    <span class="difficulty-dot active"></span>
                    <span class="difficulty-dot active"></span>
                    <span class="difficulty-dot"></span>
                    <span class="difficulty-dot"></span>
                    <span class="difficulty-dot"></span>
                </div>
                
                <div class="cultural-connection">
                    üåø Real-world problems using whƒÅnau and hap≈´ contexts
                </div>
            </div>

            <!-- SHAPE EXPLORATION -->
            <div class="game-card game-shapes" onclick="startGame('shapes')" tabindex="0">
                <span class="game-icon">üî∫</span>
                <h2 class="game-title">Sacred Shapes</h2>
                <p class="game-description">Explore shapes and spatial relationships through traditional MƒÅori architecture and design</p>
                
                <div class="difficulty-level">
                    <span class="difficulty-dot active"></span>
                    <span class="difficulty-dot active"></span>
                    <span class="difficulty-dot active"></span>
                    <span class="difficulty-dot active"></span>
                    <span class="difficulty-dot"></span>
                </div>
                
                <div class="cultural-connection">
                    üåø Geometry of marae, wharenui, and traditional carvings
                </div>
            </div>
        </section>

        <!-- GAME INTERFACES -->
        
        <!-- COUNTING GAME INTERFACE -->
        <section class="game-interface" id="counting-game">
            <div class="game-nav">
                <button class="back-button large-touch-target" onclick="returnToMenu()">‚Üê Back to Games</button>
                <div class="game-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" id="counting-progress" style="width: 0%;"></div>
                    </div>
                    <div class="score-display" id="counting-score">Score: 0</div>
                </div>
            </div>

            <div class="game-question">
                <div class="question-text" id="counting-question">How many kiwi can you count?</div>
                <div class="cultural-context" id="counting-context">Kiwi are our national bird and sacred to many iwi</div>
            </div>

            <div class="maori-numbers" id="maori-number-display">
                <div class="maori-number" id="maori-number-text">Kotahi (One)</div>
                <div class="pronunciation-guide" id="pronunciation-guide">KOH-tah-hee</div>
            </div>

            <div class="counting-objects" id="counting-objects">
                <!-- Objects will be populated by JavaScript -->
            </div>

            <div class="answer-options" id="counting-answers">
                <!-- Answer buttons will be populated by JavaScript -->
            </div>
        </section>

        <!-- PATTERN RECOGNITION GAME INTERFACE -->
        <section class="game-interface" id="patterns-game">
            <div class="game-nav">
                <button class="back-button large-touch-target" onclick="returnToMenu()">‚Üê Back to Games</button>
                <div class="game-progress">
                    <div class="progress-bar">
                        <div class="progress-fill" id="patterns-progress" style="width: 0%;"></div>
                    </div>
                    <div class="score-display" id="patterns-score">Score: 0</div>
                </div>
            </div>

            <div class="game-question">
                <div class="question-text" id="patterns-question">What comes next in this traditional pattern?</div>
                <div class="cultural-context" id="patterns-context">This pattern is inspired by traditional taniko weaving</div>
            </div>

            <div class="pattern-sequence" id="pattern-sequence">
                <!-- Pattern shapes will be populated by JavaScript -->
            </div>

            <div class="answer-options" id="pattern-answers">
                <!-- Pattern answer options will be populated by JavaScript -->
            </div>
        </section>

        <!-- FEEDBACK MESSAGE -->
        <div class="feedback-message" id="feedback-message">
            <div class="feedback-icon" id="feedback-icon">üéâ</div>
            <div class="feedback-text" id="feedback-text">Excellent work!</div>
            <div class="feedback-explanation" id="feedback-explanation">You counted correctly! Kiwi are special birds in Aotearoa.</div>
            <button class="continue-button large-touch-target" onclick="nextQuestion()">Continue Learning</button>
        </div>
    </div>

    <script>
        // MƒÄORI NUMERACY ADVENTURES - ADAPTIVE LEARNING GAME SYSTEM
        // Designed for Mangakotukutuku College junior students
        // Culturally responsive, neurodivergent-friendly, foundational skills focus

        // GAME STATE
        let gameState = {
            currentGame: null,
            currentLevel: 1,
            score: 0,
            questionsAnswered: 0,
            correctAnswers: 0,
            currentQuestion: null,
            gameProgress: 0
        };

        // MƒÄORI NUMBER SYSTEM
        const MAORI_NUMBERS = {
            0: { maori: 'Kore', pronunciation: 'KOH-reh', meaning: 'nothing/zero' },
            1: { maori: 'Kotahi', pronunciation: 'KOH-tah-hee', meaning: 'one' },
            2: { maori: 'Rua', pronunciation: 'ROO-ah', meaning: 'two' },
            3: { maori: 'Toru', pronunciation: 'TOH-roo', meaning: 'three' },
            4: { maori: 'WhƒÅ', pronunciation: 'FAH', meaning: 'four' },
            5: { maori: 'Rima', pronunciation: 'REE-mah', meaning: 'five/hand' },
            6: { maori: 'Ono', pronunciation: 'OH-noh', meaning: 'six' },
            7: { maori: 'Whitu', pronunciation: 'FEE-too', meaning: 'seven' },
            8: { maori: 'Waru', pronunciation: 'WAH-roo', meaning: 'eight' },
            9: { maori: 'Iwa', pronunciation: 'EE-wah', meaning: 'nine' },
            10: { maori: 'Tekau', pronunciation: 'TEH-kah-oo', meaning: 'ten/complete set' }
        };

        // CULTURAL OBJECTS FOR COUNTING
        const CULTURAL_OBJECTS = {
            animals: [
                { emoji: 'ü¶Ñ', name: 'Kiwi', context: 'Our national bird, sacred to many iwi' },
                { emoji: 'üêã', name: 'Tohora (Whale)', context: 'Ancestral guardians of the ocean' },
                { emoji: 'ü¶Ö', name: 'KƒÅrearea (Falcon)', context: 'Swift hunters of the skies' },
                { emoji: 'üêü', name: 'Ika (Fish)', context: 'Food from Tangaroa\'s realm' },
                { emoji: 'ü¶≠', name: 'Kekeno (Seal)', context: 'Playful ocean mammals' }
            ],
            plants: [
                { emoji: 'üåø', name: 'Harakeke (Flax)', context: 'Used for weaving and medicine' },
                { emoji: 'üå≥', name: 'Kauri', context: 'Ancient giants of the forest' },
                { emoji: 'üå∫', name: 'P≈çhutukawa', context: 'Christmas tree of Aotearoa' },
                { emoji: 'üçÉ', name: 'Kawakawa', context: 'Medicinal plant with healing properties' }
            ],
            cultural: [
                { emoji: 'üèõÔ∏è', name: 'Wharenui', context: 'Meeting house representing ancestors' },
                { emoji: 'üö£', name: 'Waka', context: 'Traditional voyaging vessels' },
                { emoji: 'ü™∂', name: 'Huruhuru', context: 'Sacred feathers for ceremonies' },
                { emoji: '‚≠ê', name: 'Whet≈´', context: 'Stars for navigation and stories' }
            ]
        };

        // TRADITIONAL PATTERNS
        const MAORI_PATTERNS = [
            { name: 'Koru', elements: ['üåÄ', 'üåÄ', 'üåø', 'üåÄ'], meaning: 'Unfurling fern representing growth' },
            { name: 'Niho Taniwha', elements: ['‚ñ≤', '‚ñº', '‚ñ≤', '‚ñº'], meaning: 'Teeth of the taniwha' },
            { name: 'Mangopare', elements: ['‚óÜ', '‚óã', '‚óÜ', '‚óã'], meaning: 'Hammerhead shark pattern' },
            { name: 'Patiki', elements: ['‚óá', '‚óá', '‚ñ°', '‚óá'], meaning: 'Flounder pattern' }
        ];

        // INITIALIZE GAMES SYSTEM
        function initGames() {
            console.log('üî¢ Initializing MƒÅori Numeracy Adventures...');
            
            setupKeyboardNavigation();
            setupAccessibilityFeatures();
            loadGameProgress();
            
            console.log('‚úÖ Games ready - Kia kaha with your learning!');
        }

        // GAME LAUNCHER
        async function startGame(gameType) {
            console.log(`üéØ Starting ${gameType} game...`);
            
            gameState.currentGame = gameType;
            gameState.currentLevel = 1;
            gameState.score = 0;
            gameState.questionsAnswered = 0;
            gameState.correctAnswers = 0;
            gameState.gameProgress = 0;

            // Hide game selection, show game interface
            document.getElementById('games-selection').style.display = 'none';
            document.getElementById(`${gameType}-game`).classList.add('active');

            // DEPLOY DEEPSEEK AGENTS for adaptive content
            await deployAdaptiveGameContent(gameType);

            // Start first question
            nextQuestion();
        }

        async function deployAdaptiveGameContent(gameType) {
            console.log('ü§ñ Deploying DeepSeek agents for adaptive game content...');
            
            try {
                const response = await fetch('/.netlify/functions/deepseek-multi-agent-orchestra', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        task: `Generate adaptive numeracy game content for "${gameType}" game targeting Mangakotukutuku College junior students. Create culturally authentic problems that build foundational math skills while honoring Te Ao MƒÅori perspectives. Include multiple difficulty levels and engagement strategies for neurodivergent learners.`,
                        context: {
                            role: 'adaptive_game_designer',
                            focus: 'foundational_numeracy',
                            game_type: gameType,
                            cultural_integration: 'high',
                            accessibility: 'neurodivergent_friendly',
                            source: 'numeracy_games'
                        },
                        priority: 'high',
                        agentCount: 4
                    })
                });

                if (response.ok) {
                    const data = await response.json();
                    console.log('‚úÖ Adaptive game content deployed:', data.orchestration?.primary_response || 'Content ready');
                }
                
            } catch (error) {
                console.error('‚ùå Adaptive game content deployment failed:', error);
            }
        }

        function returnToMenu() {
            // Hide all game interfaces
            document.querySelectorAll('.game-interface').forEach(interface => {
                interface.classList.remove('active');
            });
            
            // Show game selection
            document.getElementById('games-selection').style.display = 'grid';
            
            // Reset game state
            gameState.currentGame = null;
            
            // Save progress
            saveGameProgress();
        }

        function nextQuestion() {
            // Hide feedback message
            document.getElementById('feedback-message').classList.remove('show');
            
            // Generate next question based on current game
            switch (gameState.currentGame) {
                case 'counting':
                    generateCountingQuestion();
                    break;
                case 'patterns':
                    generatePatternQuestion();
                    break;
                case 'operations':
                    generateOperationsQuestion();
                    break;
                case 'shapes':
                    generateShapesQuestion();
                    break;
            }
            
            // Update progress
            updateGameProgress();
        }

        function generateCountingQuestion() {
            const objectTypes = Object.keys(CULTURAL_OBJECTS);
            const randomType = objectTypes[Math.floor(Math.random() * objectTypes.length)];
            const objects = CULTURAL_OBJECTS[randomType];
            const randomObject = objects[Math.floor(Math.random() * objects.length)];
            
            // Generate number to count (1-10 for beginners)
            const targetCount = Math.floor(Math.random() * 5) + 1 + gameState.currentLevel;
            const maxCount = Math.min(targetCount + 3, 10);
            
            // Update question display
            document.getElementById('counting-question').textContent = 
                `How many ${randomObject.name} can you count?`;
            document.getElementById('counting-context').textContent = randomObject.context;
            
            // Show MƒÅori number
            const maoriNum = MAORI_NUMBERS[targetCount];
            document.getElementById('maori-number-text').textContent = 
                `${maoriNum.maori} (${targetCount})`;
            document.getElementById('pronunciation-guide').textContent = maoriNum.pronunciation;
            
            // Generate counting objects
            const objectsContainer = document.getElementById('counting-objects');
            objectsContainer.innerHTML = '';
            
            for (let i = 0; i < targetCount; i++) {
                const obj = document.createElement('div');
                obj.className = 'counting-object large-touch-target';
                obj.textContent = randomObject.emoji;
                obj.setAttribute('aria-label', `${randomObject.name} ${i + 1}`);
                obj.tabIndex = 0;
                
                obj.addEventListener('click', () => selectCountingObject(obj, i));
                obj.addEventListener('keydown', (e) => {
                    if (e.key === 'Enter' || e.key === ' ') {
                        selectCountingObject(obj, i);
                    }
                });
                
                objectsContainer.appendChild(obj);
            }
            
            // Generate answer options
            const answersContainer = document.getElementById('counting-answers');
            answersContainer.innerHTML = '';
            
            const answerOptions = generateAnswerOptions(targetCount, maxCount, 4);
            answerOptions.forEach(option => {
                const button = document.createElement('button');
                button.className = 'answer-button large-touch-target';
                button.textContent = option;
                button.setAttribute('aria-label', `Answer: ${option}`);
                button.addEventListener('click', () => checkAnswer(option, targetCount, randomObject));
                answersContainer.appendChild(button);
            });
            
            // Store correct answer
            gameState.currentQuestion = {
                type: 'counting',
                correctAnswer: targetCount,
                object: randomObject,
                totalObjects: targetCount
            };
        }

        function generatePatternQuestion() {
            const pattern = MAORI_PATTERNS[Math.floor(Math.random() * MAORI_PATTERNS.length)];
            const sequence = [...pattern.elements];
            
            // Remove last element to create the question
            const correctAnswer = sequence.pop();
            
            // Update question display
            document.getElementById('patterns-question').textContent = 
                `What comes next in this ${pattern.name} pattern?`;
            document.getElementById('patterns-context').textContent = pattern.meaning;
            
            // Display pattern sequence
            const sequenceContainer = document.getElementById('pattern-sequence');
            sequenceContainer.innerHTML = '';
            
            sequence.forEach((element, index) => {
                const shape = document.createElement('div');
                shape.className = 'pattern-shape';
                shape.textContent = element;
                shape.setAttribute('aria-label', `Pattern element ${index + 1}: ${element}`);
                sequenceContainer.appendChild(shape);
            });
            
            // Add question mark for missing element
            const questionShape = document.createElement('div');
            questionShape.className = 'pattern-shape';
            questionShape.style.background = '#f0f0f0';
            questionShape.style.border = '3px dashed #999';
            questionShape.textContent = '?';
            questionShape.setAttribute('aria-label', 'Missing pattern element');
            sequenceContainer.appendChild(questionShape);
            
            // Generate answer options
            const answersContainer = document.getElementById('pattern-answers');
            answersContainer.innerHTML = '';
            
            const wrongOptions = ['‚óÜ', '‚óã', '‚ñ≤', '‚ñº', '‚óá', '‚ñ°'].filter(opt => opt !== correctAnswer);
            const answerOptions = [correctAnswer, ...wrongOptions.slice(0, 3)].sort(() => Math.random() - 0.5);
            
            answerOptions.forEach(option => {
                const button = document.createElement('button');
                button.className = 'answer-button large-touch-target';
                button.textContent = option;
                button.style.fontSize = '3rem';
                button.setAttribute('aria-label', `Pattern answer: ${option}`);
                button.addEventListener('click', () => checkAnswer(option, correctAnswer, pattern));
                answersContainer.appendChild(button);
            });
            
            // Store correct answer
            gameState.currentQuestion = {
                type: 'patterns',
                correctAnswer: correctAnswer,
                pattern: pattern
            };
        }

        function generateAnswerOptions(correct, max, count) {
            const options = [correct];
            
            while (options.length < count) {
                const option = Math.floor(Math.random() * max) + 1;
                if (!options.includes(option)) {
                    options.push(option);
                }
            }
            
            return options.sort(() => Math.random() - 0.5);
        }

        function selectCountingObject(element, index) {
            element.classList.toggle('selected');
            
            // Count selected objects
            const selectedCount = document.querySelectorAll('.counting-object.selected').length;
            
            // Announce selection for screen readers
            const announcement = document.createElement('div');
            announcement.setAttribute('aria-live', 'polite');
            announcement.style.position = 'absolute';
            announcement.style.left = '-10000px';
            announcement.textContent = `Selected ${selectedCount} objects`;
            document.body.appendChild(announcement);
            
            setTimeout(() => {
                document.body.removeChild(announcement);
            }, 1000);
        }

        function checkAnswer(userAnswer, correctAnswer, context) {
            gameState.questionsAnswered++;
            
            const isCorrect = userAnswer === correctAnswer;
            
            if (isCorrect) {
                gameState.correctAnswers++;
                gameState.score += 10 * gameState.currentLevel;
                showFeedback(true, correctAnswer, context);
                
                // Visual feedback on correct button
                event.target.classList.add('correct');
                
                // Mark objects as correct if counting game
                if (gameState.currentGame === 'counting') {
                    document.querySelectorAll('.counting-object').forEach(obj => {
                        obj.classList.add('correct');
                    });
                }
            } else {
                showFeedback(false, correctAnswer, context);
                
                // Visual feedback on incorrect button
                event.target.classList.add('incorrect');
                
                // Highlight correct answer
                setTimeout(() => {
                    document.querySelectorAll('.answer-button').forEach(button => {
                        if (button.textContent == correctAnswer) {
                            button.classList.add('correct');
                        }
                    });
                }, 500);
            }
            
            // Disable all answer buttons
            document.querySelectorAll('.answer-button').forEach(button => {
                button.disabled = true;
            });
        }

        function showFeedback(isCorrect, correctAnswer, context) {
            const feedbackMessage = document.getElementById('feedback-message');
            const feedbackIcon = document.getElementById('feedback-icon');
            const feedbackText = document.getElementById('feedback-text');
            const feedbackExplanation = document.getElementById('feedback-explanation');
            
            if (isCorrect) {
                feedbackIcon.textContent = 'üéâ';
                feedbackText.textContent = 'Kia pai! Well done!';
                feedbackText.style.color = '#4caf50';
                
                if (context.name) {
                    feedbackExplanation.textContent = 
                        `Perfect counting! ${correctAnswer} ${context.name}. ${context.context}`;
                } else if (context.meaning) {
                    feedbackExplanation.textContent = 
                        `Excellent pattern recognition! You understand the ${context.name} pattern: ${context.meaning}`;
                }
            } else {
                feedbackIcon.textContent = 'üí≠';
                feedbackText.textContent = 'Not quite - let\'s learn together!';
                feedbackText.style.color = '#ff9800';
                
                if (context.name) {
                    feedbackExplanation.textContent = 
                        `The correct answer is ${correctAnswer}. ${context.context} Let's keep practicing!`;
                } else if (context.meaning) {
                    feedbackExplanation.textContent = 
                        `In the ${context.name} pattern, the next element should be part of the traditional sequence. ${context.meaning}`;
                }
            }
            
            feedbackMessage.classList.add('show');
        }

        function updateGameProgress() {
            const progressPercentage = (gameState.questionsAnswered / 10) * 100;
            gameState.gameProgress = Math.min(progressPercentage, 100);
            
            // Update progress bar
            const gameType = gameState.currentGame;
            const progressBar = document.getElementById(`${gameType}-progress`);
            const scoreDisplay = document.getElementById(`${gameType}-score`);
            
            if (progressBar) {
                progressBar.style.width = gameState.gameProgress + '%';
            }
            
            if (scoreDisplay) {
                scoreDisplay.textContent = `Score: ${gameState.score}`;
            }
            
            // Level up if needed
            if (gameState.questionsAnswered > 0 && gameState.questionsAnswered % 3 === 0) {
                const accuracy = gameState.correctAnswers / gameState.questionsAnswered;
                if (accuracy >= 0.8) {
                    gameState.currentLevel = Math.min(gameState.currentLevel + 1, 5);
                    showLevelUp();
                }
            }
        }

        function showLevelUp() {
            const levelUpMessage = document.createElement('div');
            levelUpMessage.className = 'feedback-message show';
            levelUpMessage.innerHTML = `
                <div class="feedback-icon">üåü</div>
                <div class="feedback-text" style="color: #9c27b0;">Level Up!</div>
                <div class="feedback-explanation">You've reached Level ${gameState.currentLevel}! Questions will be more challenging now.</div>
                <button class="continue-button" onclick="this.parentElement.remove(); nextQuestion();">Ready for Challenge!</button>
            `;
            document.body.appendChild(levelUpMessage);
        }

        function setupKeyboardNavigation() {
            document.addEventListener('keydown', (e) => {
                // Arrow key navigation for game cards
                if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {
                    const focusedElement = document.activeElement;
                    if (focusedElement.classList.contains('game-card')) {
                        e.preventDefault();
                        navigateGameCards(e.key);
                    }
                }
                
                // Enter key activation
                if (e.key === 'Enter' && document.activeElement.classList.contains('game-card')) {
                    document.activeElement.click();
                }
                
                // Escape to return to menu
                if (e.key === 'Escape' && gameState.currentGame) {
                    returnToMenu();
                }
            });
        }

        function navigateGameCards(direction) {
            const gameCards = document.querySelectorAll('.game-card');
            const currentIndex = Array.from(gameCards).indexOf(document.activeElement);
            let newIndex;
            
            switch (direction) {
                case 'ArrowRight':
                case 'ArrowDown':
                    newIndex = (currentIndex + 1) % gameCards.length;
                    break;
                case 'ArrowLeft':
                case 'ArrowUp':
                    newIndex = (currentIndex - 1 + gameCards.length) % gameCards.length;
                    break;
            }
            
            gameCards[newIndex].focus();
        }

        function setupAccessibilityFeatures() {
            // Add ARIA labels and roles
            document.querySelectorAll('.game-card').forEach(card => {
                card.setAttribute('role', 'button');
                card.setAttribute('aria-label', 
                    `${card.querySelector('.game-title').textContent}: ${card.querySelector('.game-description').textContent}`
                );
            });
            
            // Add live region for announcements
            const liveRegion = document.createElement('div');
            liveRegion.setAttribute('aria-live', 'polite');
            liveRegion.setAttribute('aria-atomic', 'true');
            liveRegion.className = 'sr-only';
            liveRegion.id = 'live-announcements';
            document.body.appendChild(liveRegion);
        }

        function announceToScreenReader(message) {
            const liveRegion = document.getElementById('live-announcements');
            if (liveRegion) {
                liveRegion.textContent = message;
                setTimeout(() => {
                    liveRegion.textContent = '';
                }, 1000);
            }
        }

        function loadGameProgress() {
            const saved = localStorage.getItem('mangakotukutuku_numeracy_progress');
            if (saved) {
                const savedProgress = JSON.parse(saved);
                // Apply saved progress if needed
                console.log('Loaded game progress:', savedProgress);
            }
        }

        function saveGameProgress() {
            const progress = {
                totalScore: gameState.score,
                currentLevel: gameState.currentLevel,
                questionsAnswered: gameState.questionsAnswered,
                correctAnswers: gameState.correctAnswers,
                timestamp: new Date().toISOString()
            };
            
            localStorage.setItem('mangakotukutuku_numeracy_progress', JSON.stringify(progress));
        }

        // Placeholder functions for other game types
        function generateOperationsQuestion() {
            // Implementation for operations game
            console.log('Operations game coming soon!');
            showFeedback(true, 0, { context: 'Operations game is being developed by our AI agents!' });
        }

        function generateShapesQuestion() {
            // Implementation for shapes game
            console.log('Shapes game coming soon!');
            showFeedback(true, 0, { context: 'Shapes game is being developed with traditional MƒÅori architecture!' });
        }

        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', initGames);
    </script>

    <!-- Footer -->
    <div id="footer-component"></div>
    <script>
        fetch('/components/footer.html').then(r=>r.text()).then(html=>{
            document.getElementById('footer-component').innerHTML=html;
        });
    </script>

<!-- üé® ULTIMATE BEAUTY SYSTEM: Complete UX -->

<!-- Footer -->
<div id="footer-container"></div>
<script>
  fetch('/components/footer.html').then(r=>r.text()).then(html=>{
    document.getElementById('footer-container').innerHTML=html;
  });
</script>

<!-- Mobile Navigation -->
<div id="mobile-nav-bottom"></div>
<script>
  fetch('/components/mobile-bottom-nav.html').then(r=>r.text()).then(html=>{
    document.getElementById('mobile-nav-bottom').innerHTML=html;
  });
</script>

<!-- Floating Action Button (Help) -->
<div id="fab-quick-actions"></div>
<script>
  fetch('/components/quick-actions-fab.html').then(r=>r.text()).then(html=>{
    document.getElementById('fab-quick-actions').innerHTML=html;
  });
</script>

<!-- üé® ULTIMATE BEAUTY: Framer Cultural Gestures -->
<script src="/js/framer-cultural-gestures-ultimate.js" defer></script>


<!-- üìä ULTIMATE BEAUTY: PostHog Analytics (Privacy-First) -->
<script src="/js/posthog-analytics.js" defer></script>

</body>
</html>