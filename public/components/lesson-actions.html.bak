<!-- Lesson Action Buttons - Add to any lesson/handout -->
<div class="lesson-actions no-print" style="background: linear-gradient(135deg, #f8fafc, #e2e8f0); padding: 1.5rem; border-radius: 12px; margin: 2rem 0; border: 2px solid #cbd5e1; box-shadow: 0 4px 12px rgba(0,0,0,0.08);">
    <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 1rem;">
        
        <!-- Left: Quick Actions -->
        <div style="display: flex; gap: 0.75rem; flex-wrap: wrap;">
            <!-- Print Button -->
            <button onclick="window.print()" class="action-btn" style="background: #3b82f6; color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 8px; font-weight: 600; cursor: pointer; display: flex; align-items: center; gap: 0.5rem; transition: all 0.2s ease; font-size: 0.95rem;" title="Print this resource (Ctrl+P or Cmd+P)">
                <span>🖨️</span>
                <span>Print</span>
            </button>
            
            <!-- Save/Favorite Button -->
            <button onclick="saveFavorite()" class="action-btn" style="background: #10b981; color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 8px; font-weight: 600; cursor: pointer; display: flex; align-items: center; gap: 0.5rem; transition: all 0.2s ease; font-size: 0.95rem;" title="Save to My Kete">
                <span id="favorite-icon">⭐</span>
                <span>Save</span>
            </button>
            
            <!-- Share Button -->
            <button onclick="shareResource()" class="action-btn" style="background: #8b5cf6; color: white; border: none; padding: 0.75rem 1.5rem; border-radius: 8px; font-weight: 600; cursor: pointer; display: flex; align-items: center; gap: 0.5rem; transition: all 0.2s ease; font-size: 0.95rem;" title="Share this resource">
                <span>🔗</span>
                <span>Share</span>
            </button>
        </div>
        
        <!-- Right: Help & Report -->
        <div style="display: flex; gap: 0.75rem; align-items: center;">
            <a href="/help.html" style="color: #6b7280; text-decoration: none; font-size: 0.9rem; display: flex; align-items: center; gap: 0.3rem; padding: 0.5rem 1rem; border-radius: 6px; transition: all 0.2s ease;" onmouseover="this.style.background='#f3f4f6'" onmouseout="this.style.background='transparent'">
                <span>💡</span>
                <span>Help</span>
            </a>
            <button onclick="reportIssue()" style="color: #6b7280; background: transparent; border: none; font-size: 0.9rem; cursor: pointer; display: flex; align-items: center; gap: 0.3rem; padding: 0.5rem 1rem; border-radius: 6px; transition: all 0.2s ease;" onmouseover="this.style.background='#f3f4f6'" onmouseout="this.style.background='transparent'" title="Report an issue with this resource">
                <span>🚩</span>
                <span>Report Issue</span>
            </button>
        </div>
    </div>
</div>

<!-- Toast Notification (for feedback) -->
<div id="action-toast" style="position: fixed; bottom: 2rem; right: 2rem; background: #1f2937; color: white; padding: 1rem 1.5rem; border-radius: 12px; box-shadow: 0 8px 24px rgba(0,0,0,0.3); display: none; z-index: 10000; animation: slideIn 0.3s ease;">
    <span id="toast-message"></span>
</div>

<style>
    @keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    
    .action-btn:active {
        transform: translateY(0);
    }
</style>

<script>
    // Save to favorites
    function saveFavorite() {
        const resourcePath = window.location.pathname;
        const resourceTitle = document.title;
        
        // Try to save to localStorage (works without login)
        try {
            let favorites = JSON.parse(localStorage.getItem('te-kete-favorites') || '[]');
            
            // Check if already saved
            const exists = favorites.some(f => f.path === resourcePath);
            
            if (exists) {
                // Remove from favorites
                favorites = favorites.filter(f => f.path !== resourcePath);
                localStorage.setItem('te-kete-favorites', JSON.stringify(favorites));
                document.getElementById('favorite-icon').textContent = '⭐';
                showToast('Removed from My Kete');
            } else {
                // Add to favorites
                favorites.push({
                    path: resourcePath,
                    title: resourceTitle,
                    savedAt: new Date().toISOString()
                });
                localStorage.setItem('te-kete-favorites', JSON.stringify(favorites));
                document.getElementById('favorite-icon').textContent = '🌟';
                showToast('✅ Saved to My Kete!');
            }
        } catch (e) {
            showToast('⚠️ Please enable localStorage to save favorites');
        }
    }
    
    // Share resource
    function shareResource() {
        const url = window.location.href;
        const title = document.title;
        
        // Try Web Share API (works on mobile)
        if (navigator.share) {
            navigator.share({
                title: title,
                text: `Check out this resource from Te Kete Ako: ${title}`,
                url: url
            }).then(() => {
                showToast('✅ Shared successfully!');
            }).catch(() => {
                // Fallback to copy
                copyToClipboard(url);
            });
        } else {
            // Fallback: Copy to clipboard
            copyToClipboard(url);
        }
    }
    
    // Copy URL to clipboard
    function copyToClipboard(text) {
        navigator.clipboard.writeText(text).then(() => {
            showToast('🔗 Link copied to clipboard!');
        }).catch(() => {
            // Ultimate fallback: Show URL
            showToast(`Share this link: ${text.substring(0, 50)}...`);
        });
    }
    
    // Report an issue
    function reportIssue() {
        const subject = encodeURIComponent(`Issue with: ${document.title}`);
        const body = encodeURIComponent(`Resource: ${window.location.href}\n\nDescribe the issue:\n\n`);
        window.location.href = `/contact.html?subject=${subject}&body=${body}`;
    }
    
    // Show toast notification
    function showToast(message) {
        const toast = document.getElementById('action-toast');
        const toastMessage = document.getElementById('toast-message');
        toastMessage.textContent = message;
        toast.style.display = 'block';
        setTimeout(() => {
            toast.style.display = 'none';
        }, 3000);
    }
    
    // Check if this resource is already favorited on page load
    window.addEventListener('DOMContentLoaded', () => {
        try {
            const favorites = JSON.parse(localStorage.getItem('te-kete-favorites') || '[]');
            const currentPath = window.location.pathname;
            const isFavorited = favorites.some(f => f.path === currentPath);
            if (isFavorited) {
                document.getElementById('favorite-icon').textContent = '🌟';
            }
        } catch (e) {
            // Silent fail if localStorage not available
        }
    });
</script>

