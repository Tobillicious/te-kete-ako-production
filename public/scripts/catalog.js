import { glob } from 'glob';
import { promises as fs } from 'fs';
import * as cheerio from 'cheerio';
import path from 'path';

console.log('Starting resource cataloging process...');

// --- Configuration ---
const AVOID_GLOBS = [
    '**/index.html', // Exclude index pages
    '**/offline.html',
    '**/video-integration-test.html',
    '**/template.html',
    '**/lesson-template.html',
    '**/login.html',
    '**/register.html',
    '**/forgot-password.html',
    '**/reset-password.html',
    '**/student-dashboard.html',
    '**/teacher-dashboard.html',
    '**/project-submission.html',
    '**/my-kete.html',
    '**/my-submissions.html',
    '**/handouts/index.html',
];

const PROJECT_ROOT = path.resolve(process.cwd(), '..');

const RESOURCE_PATTERNS = [
    'handouts/**/*.html',
    'games/**/*.html',
    'activities.html',
    'units/**/*.html',
    'y8-systems/**/*.html',
    'lessons/**/*.html',
    'other-resources.html',
    'youtube.html'
].map(p => path.join(PROJECT_ROOT, p));

const CURRICULUM_DATA_PATHS = {
    nzc: path.join(PROJECT_ROOT, 'data/nzc.json'),
    temataiaho: path.join(PROJECT_ROOT, 'data/temataiaho.json')
};

const OUTPUT_FILE = path.join(PROJECT_ROOT, 'supabase/seed_data/insert_resources.sql');

// --- Main Function ---
async function catalogResources() {
    try {
        // 1. Load curriculum data
        const nzcData = JSON.parse(await fs.readFile(CURRICULUM_DATA_PATHS.nzc, 'utf-8'));
        const temataiahoData = JSON.parse(await fs.readFile(CURRICULUM_DATA_PATHS.temataiaho, 'utf-8'));
        console.log('Successfully loaded curriculum data.');

        // 2. Find all resource files
        const files = await glob(RESOURCE_PATTERNS, { ignore: AVOID_GLOBS, nodir: true });
        console.log(`Found ${files.length} resource files to process.`);

        // 3. Process each file to generate SQL
        const sqlStatements = [];
        for (const file of files) {
            const statement = await processFile(file, nzcData, temataiahoData);
            if (statement) {
                sqlStatements.push(statement);
            }
        }

        // 4. Write all SQL statements to a single file
        const fileHeader = `-- Generated by Te Kete Ako Resource Cataloger on ${new Date().toISOString()}\n-- Total resources found: ${sqlStatements.length}\n\n`;
        await fs.writeFile(OUTPUT_FILE, fileHeader + sqlStatements.join('\n'));

        console.log(`✅ Successfully generated ${sqlStatements.length} SQL INSERT statements with curriculum links.`);
        console.log(`Output file: ${OUTPUT_FILE}`);

    } catch (error) {
        console.error('❌ An error occurred during the cataloging process:', error);
    }
}

// --- File Processing Logic ---
async function processFile(filePath, nzcData, temataiahoData) {
    try {
        const content = await fs.readFile(filePath, 'utf-8');
        const $ = cheerio.load(content);
        const fileText = ($('body').text() || content).toLowerCase();

        // Extract basic metadata
        const title = $('title').text().split('|')[0].trim() || path.basename(filePath, '.html');
        const description = $('meta[name="description"]').attr('content') || $('p').first().text().trim();
        const relativePath = '/' + path.relative(PROJECT_ROOT, filePath).replace(/\\/g, '/');

        // Infer metadata
        const type = inferType(relativePath);
        const subject = inferSubject(relativePath, fileText);
        const yearLevels = inferYearLevels(relativePath, fileText);
        const tags = inferTags(title, description, relativePath);
        
        // Link to curriculum
        const nzcLinks = findNzcLinks(fileText, nzcData);
        const temataiahoLinks = findTemataiahoLinks(fileText, temataiahoData);

        // Escape values for SQL
        const escapedTitle = title.replace(/'/g, "''");
        const escapedDescription = description.substring(0, 250).replace(/'/g, "''");
        const yearLevelsSql = yearLevels.length > 0 ? `ARRAY[${yearLevels.join(',')}]` : 'NULL';
        const tagsSql = tags.length > 0 ? `ARRAY[${tags.map(t => `'${t.replace(/'/g, "''")}'`).join(',')}]` : 'NULL';
        const subjectSql = subject ? `'${subject.replace(/'/g, "''")}'` : 'NULL';
        const nzcLinksSql = Object.keys(nzcLinks).length > 0 ? `'${JSON.stringify(nzcLinks)}'::jsonb` : 'NULL';
        const temataiahoLinksSql = Object.keys(temataiahoLinks).length > 0 ? `'${JSON.stringify(temataiahoLinks)}'::jsonb` : 'NULL';

        // Construct the SQL statement
        return `INSERT INTO resources (title, description, type, path, subject, year_levels, tags, nz_curriculum_links, te_mataiaho_links) VALUES ('${escapedTitle}', '${escapedDescription}', '${type}', '${relativePath}', ${subjectSql}, ${yearLevelsSql}, ${tagsSql}, ${nzcLinksSql}, ${temataiahoLinksSql});`;

    } catch (error) {
        console.warn(`Could not process file: ${filePath}. Error: ${error.message}`);
        return null;
    }
}

// --- Curriculum Linking Helpers ---

function findNzcLinks(text, nzcData) {
    const links = {};
    nzcData.subjects.forEach(subject => {
        subject.levels.forEach(level => {
            level.strands.forEach(strand => {
                strand.achievement_objectives.forEach(ao => {
                    const keywords = ao.statement.toLowerCase().split(' ').slice(0, 3).join(' '); // Use first 3 words as keywords
                    if (text.includes(keywords)) {
                        if (!links[subject.name]) links[subject.name] = [];
                        links[subject.name].push({ id: ao.id, statement: ao.statement });
                    }
                });
            });
        });
    });
    return links;
}

function findTemataiahoLinks(text, temataiahoData) {
    const links = {};
    temataiahoData.subjects.forEach(subject => {
        subject.learning_phases.forEach(phase => {
            phase.progress_outcomes.forEach(po => {
                const keywords = po.statement.toLowerCase().split(':')[0]; // Use text before colon as keyword
                if (text.includes(keywords)) {
                     if (!links[subject.name]) links[subject.name] = [];
                     links[subject.name].push({ id: po.id, statement: po.statement });
                }
            });
        });
    });
    return links;
}


// --- Metadata Inference Helpers (largely unchanged) ---

function inferType(filePath) {
    if (filePath.includes('/handouts/')) return 'handout';
    if (filePath.includes('/games/')) return 'game';
    if (filePath.includes('/units/')) return 'unit_plan';
    if (filePath.includes('/y8-systems/')) return 'unit_plan';
    if (filePath.includes('/lessons/')) return 'lesson_plan';
    if (filePath.includes('activities.html')) return 'activity';
    if (filePath.includes('youtube.html')) return 'video';
    return 'other';
}

function inferSubject(filePath, content) {
    const lowerCaseContent = content.toLowerCase();
    const lowerCasePath = filePath.toLowerCase();

    if (lowerCasePath.includes('english') || lowerCaseContent.includes('english')) return 'English';
    if (lowerCasePath.includes('math') || lowerCasePath.includes('mathematic') || lowerCaseContent.includes('numeracy')) return 'Mathematics';
    if (lowerCasePath.includes('science') || lowerCaseContent.includes('science')) return 'Science';
    if (lowerCasePath.includes('social-science') || lowerCasePath.includes('humanities')) return 'Social Sciences';
    if (lowerCasePath.includes('maori') || lowerCasePath.includes('te reo') || lowerCasePath.includes('te ao')) return 'Te Ao Māori';
    if (lowerCasePath.includes('art')) return 'The Arts';
    if (lowerCasePath.includes('health')) return 'Health and PE';
    if (lowerCasePath.includes('tech')) return 'Technology';
    return 'Cross-Curricular';
}

function inferYearLevels(filePath, content) {
    const levels = new Set();
    const text = (filePath + ' ' + content).toLowerCase();

    for (let i = 7; i <= 13; i++) {
        if (text.includes(`year ${i}`) || text.includes(`y${i}`)) {
            levels.add(i);
        }
    }
    if (levels.size === 0) {
        return [7, 8, 9, 10, 11, 12, 13];
    }
    return Array.from(levels);
}

function inferTags(title, description, filePath) {
    const tags = new Set();
    const text = (title + ' ' + description + ' ' + filePath).toLowerCase();

    if (text.includes('literacy')) tags.add('literacy');
    if (text.includes('numeracy')) tags.add('numeracy');
    if (text.includes('writing')) tags.add('writing');
    if (text.includes('reading')) tags.add('reading');
    if (text.includes('comprehension')) tags.add('comprehension');
    if (text.includes('assessment')) tags.add('assessment');
    if (text.includes('critical thinking')) tags.add('critical thinking');
    if (text.includes('collaboration')) tags.add('collaboration');
    if (text.includes('inquiry')) tags.add('inquiry');
    if (text.includes('template')) tags.add('template');
    if (text.includes('framework')) tags.add('framework');
    if (text.includes('maori') || text.includes('māori')) tags.add('māori');
    if (text.includes('te reo')) tags.add('te reo');
    if (text.includes('treaty') || text.includes('waitangi')) tags.add('treaty of waitangi');
    if (text.includes('whakapapa')) tags.add('whakapapa');
    if (text.includes('manaakitanga')) tags.add('manaakitanga');
    if (text.includes('kaitiakitanga')) tags.add('kaitiakitanga');
    tags.add(inferType(filePath));

    return Array.from(tags);
}


// --- Execute Script ---
catalogResources();
