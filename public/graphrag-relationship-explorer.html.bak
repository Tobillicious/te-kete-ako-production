<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üåâ GraphRAG Relationship Explorer | Te Kete Ako</title>
    
    <!-- üé® ULTIMATE BEAUTY SYSTEM - Te Kete Ako Design Excellence -->
 <link rel="stylesheet" href="/css/te-kete-ultimate-beauty-system.css">
 <script src="https://cdn.tailwindcss.com"></script>
 <script src="/tailwind.config.ultimate.js"></script>
 <!-- END ULTIMATE BEAUTY SYSTEM --><script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    
    <style>
        .explorer-container {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 2rem;
        }
        
        .search-section {
            background: linear-gradient(135deg, #1a4d2e 0%, #2d7a4e 100%);
            padding: 2rem;
            border-radius: 12px;
            margin-bottom: 2rem;
            color: white;
        }
        
        .search-input {
            width: 100%;
            padding: 1rem;
            font-size: 1.1rem;
            border: 2px solid #4a9d6f;
            border-radius: 8px;
            margin-bottom: 1rem;
        }
        
        .relationship-card {
            background: white;
            border-left: 4px solid #2d7a4e;
            padding: 1.5rem;
            margin-bottom: 1rem;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: transform 0.2s, box-shadow 0.2s;
        }
        
        .relationship-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
        
        .relationship-type {
            display: inline-block;
            background: #2d7a4e;
            color: white;
            padding: 0.5rem 1rem;
            border-radius: 20px;
            font-size: 0.9rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }
        
        .cultural-concept {
            background: #d4a574;
            color: #0f2818;
        }
        
        .cross-curricular {
            background: #4a9d6f;
        }
        
        .prerequisite {
            background: #1a4d2e;
        }
        
        .resource-link {
            color: #2d7a4e;
            font-weight: 600;
            text-decoration: none;
            display: block;
            margin: 0.5rem 0;
        }
        
        .resource-link:hover {
            text-decoration: underline;
        }
        
        .connection-arrow {
            font-size: 1.5rem;
            color: #2d7a4e;
            margin: 0.5rem 0;
        }
        
        .metadata-box {
            background: #f5e6d3;
            padding: 1rem;
            border-radius: 6px;
            margin-top: 1rem;
            font-size: 0.9rem;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .stat-card {
            background: linear-gradient(135deg, #f5e6d3 0%, #d4a574 100%);
            padding: 1.5rem;
            border-radius: 8px;
            text-align: center;
        }
        
        .stat-number {
            font-size: 2.5rem;
            font-weight: 700;
            color: #0f2818;
            display: block;
        }
        
        .stat-label {
            font-size: 0.9rem;
            color: #4a6e2a;
            margin-top: 0.5rem;
        }
        
        .filter-buttons {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }
        
        .filter-btn {
            padding: 0.75rem 1.5rem;
            border: 2px solid white;
            background: transparent;
            color: white;
            border-radius: 6px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s;
        }
        
        .filter-btn:hover,
        .filter-btn.active {
            background: white;
            color: #1a4d2e;
        }
        
        .loading {
            text-align: center;
            padding: 3rem;
            font-size: 1.2rem;
            color: #2d7a4e;
        }
        
        .pathway-viz {
            background: #f9f9f9;
            padding: 1.5rem;
            border-radius: 8px;
            margin-top: 1rem;
            border: 2px dashed #2d7a4e;
        }
    </style>
<!-- Professional Design System -->
<link rel="stylesheet" href="/css/te-kete-professional.css"></head>
<body class="pattern-koru-subtle"> 
 <!-- üé® ULTIMATE BEAUTY: Navigation -->
 <div id="nav-container"></div>
 <script>
   fetch('/components/navigation-standard.html')
     .then(r => r.text())
     .then(html => document.getElementById('nav-container').innerHTML = html);
 </script>
    <div class="explorer-container">
        <header style="text-align: center; margin-bottom: 2rem;">
            <h1>üåâ GraphRAG Relationship Explorer</h1>
            <p style="font-size: 1.1rem; color: #4a6e2a;">
                Discover intelligent connections across 238,000+ learning relationships
            </p>
        </header>
        
        <div class="stats-grid" id="stats-container">
            <div class="stat-card">
                <span class="stat-number" id="total-relationships">...</span>
                <span class="stat-label">Total Relationships</span>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="cultural-bridges">...</span>
                <span class="stat-label">Cultural Bridges</span>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="cross-curricular">...</span>
                <span class="stat-label">Cross-Curricular Links</span>
            </div>
            <div class="stat-card">
                <span class="stat-number" id="learning-chains">...</span>
                <span class="stat-label">Learning Progressions</span>
            </div>
        </div>
        
        <div class="search-section">
            <h2 style="margin-bottom: 1rem;">üîç Explore Relationships</h2>
            
            <input 
                type="text" 
                class="search-input" 
                id="search-input"
                placeholder="Search for a resource (e.g., 'algebra', 'ecology', 'p≈´rƒÅkau')..."
            >
            
            <div class="filter-buttons">
                <button class="filter-btn active" data-filter="all">All Relationships</button>
                <button class="filter-btn" data-filter="embodies_mƒÅori_concept">Cultural Concepts</button>
                <button class="filter-btn" data-filter="cross_curricular_connection">Cross-Curricular</button>
                <button class="filter-btn" data-filter="builds_to">Learning Progressions</button>
                <button class="filter-btn" data-filter="prerequisite">Prerequisites</button>
            </div>
        </div>
        
        <div id="results-container">
            <div class="loading">Loading relationships...</div>
        </div>
    </div>
    
    <script>
        // Initialize Supabase
        const supabaseUrl = 'https://nlgldaqtubrlcqddppbq.supabase.co';
        const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5sZ2xkYXF0dWJybGNxZGRwcGJxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MjY1MzY5NTksImV4cCI6MjA0MjExMjk1OX0.m1DKLLZkOT3_BSan7Itawvdc0B3l0Z5xU9e_HaIJR3c';
        const supabase = window.supabase.createClient(supabaseUrl, supabaseKey);
        
        let currentFilter = 'all';
        let allRelationships = [];
        
        // Load statistics
        async function loadStats() {
            try {
                // Total relationships
                const { count: total } = await supabase
                    .from('graphrag_relationships')
                    .select('*', { count: 'exact', head: true });
                
                document.getElementById('total-relationships').textContent = total.toLocaleString();
                
                // Cultural bridges
                const { count: cultural } = await supabase
                    .from('graphrag_relationships')
                    .select('*', { count: 'exact', head: true })
                    .eq('relationship_type', 'embodies_mƒÅori_concept');
                
                document.getElementById('cultural-bridges').textContent = cultural.toLocaleString();
                
                // Cross-curricular
                const { count: crossCurr } = await supabase
                    .from('graphrag_relationships')
                    .select('*', { count: 'exact', head: true })
                    .eq('relationship_type', 'cross_curricular_connection');
                
                document.getElementById('cross-curricular').textContent = crossCurr.toLocaleString();
                
                // Learning chains
                const { count: chains } = await supabase
                    .from('graphrag_relationships')
                    .select('*', { count: 'exact', head: true })
                    .eq('relationship_type', 'builds_to');
                
                document.getElementById('learning-chains').textContent = chains.toLocaleString();
                
            } catch (error) {
                console.error('Error loading stats:', error);
            }
        }
        
        // Load recent relationships
        async function loadRelationships(filter = 'all', searchTerm = '') {
            const resultsContainer = document.getElementById('results-container');
            resultsContainer.innerHTML = '<div class="loading">Loading relationships...</div>';
            
            try {
                let query = supabase
                    .from('graphrag_relationships')
                    .select('*')
                    .order('created_at', { ascending: false })
                    .limit(50);
                
                if (filter !== 'all') {
                    query = query.eq('relationship_type', filter);
                }
                
                if (searchTerm) {
                    query = query.or(`source_path.ilike.%${searchTerm}%,target_path.ilike.%${searchTerm}%`);
                }
                
                const { data: relationships, error } = await query;
                
                if (error) throw error;
                
                allRelationships = relationships;
                renderRelationships(relationships);
                
            } catch (error) {
                console.error('Error loading relationships:', error);
                resultsContainer.innerHTML = '<div class="loading">Error loading relationships. Please try again.</div>';
            }
        }
        
        // Render relationships
        function renderRelationships(relationships) {
            const resultsContainer = document.getElementById('results-container');
            
            if (!relationships || relationships.length === 0) {
                resultsContainer.innerHTML = '<div class="loading">No relationships found.</div>';
                return;
            }
            
            const html = relationships.map(rel => {
                const typeClass = rel.relationship_type === 'embodies_mƒÅori_concept' ? 'cultural-concept' :
                                 rel.relationship_type === 'cross_curricular_connection' ? 'cross-curricular' :
                                 rel.relationship_type === 'builds_to' ? 'prerequisite' : '';
                
                const metadata = rel.metadata || {};
                const connection = metadata.connection || metadata.connection_type || '';
                
                return `
                    <div class="relationship-card">
                        <span class="relationship-type ${typeClass}">${formatRelationType(rel.relationship_type)}</span>
                        
                        <div class="resource-link">${formatPath(rel.source_path)}</div>
                        <div class="connection-arrow">‚Üì ${rel.relationship_type.replace(/_/g, ' ')}</div>
                        <div class="resource-link">${formatPath(rel.target_path)}</div>
                        
                        ${connection ? `
                            <div class="metadata-box">
                                <strong>Connection:</strong> ${connection}
                                ${metadata.concept ? `<br><strong>Concept:</strong> ${metadata.concept}` : ''}
                                ${metadata.progression ? `<br><strong>Progression:</strong> ${metadata.progression}` : ''}
                            </div>
                        ` : ''}
                    </div>
                `;
            }).join('');
            
            resultsContainer.innerHTML = html;
        }
        
        // Format relationship type
        function formatRelationType(type) {
            const typeMap = {
                'embodies_mƒÅori_concept': 'üåø Cultural Concept',
                'cross_curricular_connection': 'üîó Cross-Curricular',
                'builds_to': 'üìà Builds To',
                'prerequisite': 'üìö Prerequisite',
                'shared_cultural_element': 'üé® Shared Culture'
            };
            return typeMap[type] || type.replace(/_/g, ' ').toUpperCase();
        }
        
        // Format file path for display
        function formatPath(path) {
            if (path.startsWith('concept://')) {
                return `üìñ ${path.replace('concept://', '').replace(/-/g, ' ').toUpperCase()}`;
            }
            const parts = path.split('/');
            const filename = parts[parts.length - 1].replace('.html', '').replace(/-/g, ' ');
            return filename.length > 80 ? filename.substring(0, 80) + '...' : filename;
        }
        
        // Event listeners
        document.querySelectorAll('.filter-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                document.querySelectorAll('.filter-btn').forEach(b => b.classList.remove('active'));
                btn.classList.add('active');
                currentFilter = btn.dataset.filter;
                loadRelationships(currentFilter, document.getElementById('search-input').value);
            });
        });
        
        let searchTimeout;
        document.getElementById('search-input').addEventListener('input', (e) => {
            clearTimeout(searchTimeout);
            searchTimeout = setTimeout(() => {
                loadRelationships(currentFilter, e.target.value);
            }, 500);
        });
        
        // Initial load
        loadStats();
        loadRelationships();
    </script>

<!-- üé® ULTIMATE BEAUTY SYSTEM: Complete UX -->

<!-- Footer -->
<div id="footer-container"></div>
<script>
  fetch('/components/footer.html').then(r=>r.text()).then(html=>{
    document.getElementById('footer-container').innerHTML=html;
  });
</script>

<!-- Mobile Navigation -->
<div id="mobile-nav-bottom"></div>
<script>
  fetch('/components/mobile-bottom-nav.html').then(r=>r.text()).then(html=>{
    document.getElementById('mobile-nav-bottom').innerHTML=html;
  });
</script>

<!-- Floating Action Button (Help) -->
<div id="fab-quick-actions"></div>
<script>
  fetch('/components/quick-actions-fab.html').then(r=>r.text()).then(html=>{
    document.getElementById('fab-quick-actions').innerHTML=html;
  });
</script>

<!-- üé® ULTIMATE BEAUTY: Framer Cultural Gestures -->
<script src="/js/framer-cultural-gestures-ultimate.js" defer></script>


<!-- üìä ULTIMATE BEAUTY: PostHog Analytics (Privacy-First) -->
<script src="/js/posthog-analytics.js" defer></script>

</body>
</html>

